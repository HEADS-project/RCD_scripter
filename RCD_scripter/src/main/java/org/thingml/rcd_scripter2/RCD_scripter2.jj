/* RCD scriptgrammar.jj version 2 using task joblist*/
options
{
    STATIC = false ;
}
PARSER_BEGIN (RcdScript2Parser)
   package org.thingml.rcd_scripter2;
   class RcdScriptParser2 {
         JobList makeJobs()throws ParseException, TokenMgrError
   { return(init()) ; }
   }
PARSER_END (RcdScript2Parser)

SKIP: /* WHITE SPACE */ { "\n" | "\r" | "\r\n" |"\\"|"\t"|" "| "/"}

/* COMMENTS */

MORE :
{
  "##" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}



TOKEN [IGNORE_CASE]: /* Commands */
{
  <ADD :("ADD")>
|
  <CELL :("CELL")>
|
  <FILE :("FILE")>
|
  <FOR_EACH :("FOR_EACH")>
|
  <HAS :("HAS")>
|
  <IF :("IF")>
|
  <IN :("IN")>
|
  <INT :("INT")>
|
  <PRINT :("PRINT")>
|
  <ROW :("ROW")>
|
  <SETDEF :("SETDEF")>
|
  <TABLE :("TABLE")>
|
  <VAL :("VAL")>
}


TOKEN :  /* Literals */
{
  < VAR_LITERAL: <DOLLAR><ID_LITERAL> >
|
  < ID_LITERAL: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < DEC_LITERAL: <DIGIT> (<DIGIT>)* >
|
  < HEX_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :  /* Character groups */
{
  < LETTER: [ "a"-"z", "A"-"Z", "_" ] >
|
  < DIGIT: [ "0"-"9"] >
|
  < HEX_DIGIT: [ "0"-"9", "a"-"f", "A"-"F"] >
}

TOKEN:  /* Separators */
{
    <OBRA:("(")+>
|
    <CBRA:(")")+>
|
    <OCBRA:("{")+>
|
    <CCBRA:("}")+>
|
    <COMMA:(",")>
|
    <PERIOD:(".")>
|
    <ASSIGN:("=")>
|
    <DOLLAR:("$")>
|
    <PLUS:("+")>
}

JobList  init():
{
  JobList jobList = new JobList();
}
{
    (
        Def(jobList)
        |
        Statement(jobList)
    )*
    <EOF>
    {return jobList;}
}

void Def(JobList jobList):
{
}
{
    (
        DefTable(jobList)
        |
        DefRow(jobList)
        |
        DefCell(jobList)
        |
        DefFile(jobList)
    )
    {return jobList;}
}

void DefTable(JobList jobList):
{
    Token TId_tabName;
    Token TId_tabInitName;
    String tabInitName = null;
}
{
    <TABLE>
    TId_tabName = <VAR>
    <ASSIGN>
    <TABLE>
    <OBRA>
    (
        TId_tabInitName = <VAR>
        {tabInitName = TId_tabInitName.image;}
    )?
    <CBRA>
    {jobList.add( new JobDefTable(TId_tabName.image, tabInitName));}
}

void DefRow(JobList jobList):
{
    Token TId_rowName;
    Token TId_rowInitName;
    JobDefRow job = null;
}
{
    <ROW>
    TId_rowname = <VAR>
    <ASSIGN>
    <ROW>
    <OBRA>
    (
        CellList()
        { job = new JobDefRow(TId_rowName.image, JobMakeTId_rowInitName.image)}
        |
        TId_rowInitName = <VAR>
        { job = new JobDefRow(TId_rowName.image, TId_rowInitName.image)}
    )
    <CBRA>
    {jobList.add(job));}
}








void Statement(JobList jobList):
{
}
{
    (
        ForBlock(jobList)
        |
        IfBlock(jobList)
        |
        VarMethod(jobList)
        |
        Print(jobList)
    )
    {return jobList;}
}


void Create_table_if_eq(TableList tableList):
{
    Token TId_newtab;
    Token TId_orgtab;
    CellObj cell;
}
{
    <CR_TAB_IF_EQ>
    <OBRA>
    TId_newtab = <ID_LITERAL>
    <COMMA>
    TId_orgtab = <ID_LITERAL>
    <COMMA>
    cell = Cell_entry()        
    <CBRA>
    {tableList.createTableIfEq(TId_newtab.image, TId_orgtab.image, cell);}
}

void Create_table_join(TableList tableList):
{
    Token TId_newtab;
    Token TId_orgtab;
    Token TId_orgcol;
    Token TId_jointab;
    Token TId_joincol;
}
{
    <CR_TAB_JOIN>
    <OBRA>
    TId_newtab = <ID_LITERAL>
    <COMMA>
    TId_orgtab = <ID_LITERAL>
    <COMMA>
    TId_orgcol = <ID_LITERAL>
    <COMMA>
    TId_jointab = <ID_LITERAL>
    <COMMA>
    TId_joincol = <ID_LITERAL>
    <CBRA>
    {tableList.createTableJoin(TId_newtab.image, TId_orgtab.image, TId_orgcol.image, TId_jointab.image, TId_joincol.image);}
}

void Create_columns_concat(TableList tableList):
{
    Token TId_tab;
    Token TId_newcol;
    Token TId_orgcol1;
    Token TId_orgcol2;
}
{
    <CR_COL_CAT>
    <OBRA>
    TId_tab = <ID_LITERAL>
    <COMMA>
    TId_newcol = <ID_LITERAL>
    <COMMA>
    TId_orgcol1 = <ID_LITERAL>
    <COMMA>
    TId_orgcol2 = <ID_LITERAL>
    <CBRA>
    {tableList.tableCreateColumnsConcat(TId_tab.image, TId_newcol.image, TId_orgcol1.image, TId_orgcol2.image);}
}

void Create_columns_default(TableList tableList):
{
    RowObj row;
    CellObj cell;
    Token TId;
}
{
    (
        <CR_COL_DEF>
        <OBRA>
        TId = <ID_LITERAL>
        {row = tableList.getDefaultRowObj(TId.image);}
            (
                <COMMA>
                cell = Cell_entry()        
                {row.addCell(cell);}
            )*
        <CBRA>
    )
}


void Create_row(TableList tableList):
{
    RowObj row;
    CellObj cell;
    Token TId;
}
{
    (
        <CR_ROW>
        <OBRA>
        TId = <ID_LITERAL>
        {row = tableList.getNewRowObj(TId.image);}
        (
            <COMMA>
            cell = Cell_entry()        
            {row.addCell(cell);}
        )*
        <CBRA>
    )
}

CellObj Cell_entry():
{
    CellObj cell; 
    Token   TId;
}
{
    <OCBRA>
    TId = <ID_LITERAL>
    <COMMA>
    (
        cell = Cell_int()
        |
        cell = Cell_id()
        |
        cell = Cell_string()
    )
    <CCBRA>
    {
        cell.setId(TId.image);
        return cell;
    }
}

CellObj Cell_int():
{
    IntCellObj cell = new IntCellObj();
    Token   TId;
}
{
    (
        TId = <DEC_LITERAL>
        |
        TId = <HEX_LITERAL>
    )
    {
        cell.setImage(TId.image);
        return cell;
    }
}

CellObj Cell_id():
{
    IdCellObj cell = new IdCellObj();
    Token   TId;
}
{
    (
        TId = <ID_LITERAL>
        {cell.setImage(TId.image);}
    )
    {return cell;}
}

CellObj Cell_string():
{
    StringCellObj cell = new StringCellObj();
    Token   TId;
}
{
    (
        TId = <STRING_LITERAL>
        {cell.setImage(TId.image);}
    )
    {return cell;}
}

void Print_each_row(TableList tableList):
{
    Token TId_table;
    JobList jobList = new JobList();
    JobObj jobObj;
}
{
    <PR_EACH_ROW>
    <OBRA>
    TId_table = <ID_LITERAL>
    (
        (
            <COMMA>
            |
            <PLUS>
        )
        (
            jobObj = Print_id_element()
            |
            jobObj = Print_string_element()        
        )
        {jobList.addJobObj(jobObj);}
    )*
    <CBRA>
    {tableList.printEachRow(TId_table.image, jobList);}
}

JobObj Print_id_element():
{
    JobObj element = new PrintIdJobObj();
    Token   TId;
}
{
    (
        TId = <ID_LITERAL>
        {element.setImage(TId.image);}
    )
    {return element;}
}

JobObj Print_string_element():
{
    JobObj element = new PrintStringJobObj();
    Token   TId;
}
{
    (
        TId = <STRING_LITERAL>
        {element.setImage(TId.image);}
    )
    {return element;}
}

