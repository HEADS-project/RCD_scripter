/* RCD scriptgrammar.jj version 2 using task joblist*/
options
{
    STATIC = false ;
}
PARSER_BEGIN (RcdScript2Parser)
   package org.thingml.rcd_scripter2.parser;
   import org.thingml.rcd_scripter2.jobs.*;
   public class RcdScript2Parser {
         public JobList_Obj makeJobs()throws ParseException, TokenMgrError
   { return(init()) ; }
   }
PARSER_END (RcdScript2Parser)

SKIP: /* WHITE SPACE */ { "\n" | "\r" | "\r\n" |"\\"|"\t"|" "| "//"}

/* COMMENTS */

MORE :
{
  "##" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}



TOKEN [IGNORE_CASE]: /* Commands */
{
  <ADD :("ADD")>
|
  <ARRAY :("ARRAY")>
|
  <CELL :("CELL")>
|
  <FILE :("FILE")>
|
  <FOR_EACH :("FOR_EACH")>
|
  <HAS :("HAS")>
|
  <IF :("IF")>
|
  <IN :("IN")>
|
  <INT :("INT")>
|
  <PRINT :("PRINT")>
|
  <ROW :("ROW")>
|
  <SETDEF :("SETDEF")>
|
  <TABLE :("TABLE")>
|
  <VALUE :("VALUE")>
}


TOKEN :  /* Literals */
{
  < VAR_LITERAL: <DOLLAR><ID_LITERAL> >
|
  < ID_LITERAL: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < DEC_LITERAL: <DIGIT> (<DIGIT>)* >
|
  < HEX_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :  /* Character groups */
{
  < LETTER: [ "a"-"z", "A"-"Z", "_" ] >
|
  < DIGIT: [ "0"-"9"] >
|
  < HEX_DIGIT: [ "0"-"9", "a"-"f", "A"-"F"] >
}

TOKEN:  /* Separators */
{
    <OBRA:("(")+>
|
    <CBRA:(")")+>
|
    <OCBRA:("{")+>
|
    <CCBRA:("}")+>
|
    <COMMA:(",")>
|
    <PERIOD:(".")>
|
    <ASSIGN:("=")>
|
    <DOLLAR:("$")>
|
    <PLUS:("+")>
|
    <MINUS:("-")>
|
    <MUL:("*")>
|
    <DIV:("/")>
}

JobList_Obj  init():
{
  JobList_Obj jobList = new JobList_Obj("Main");
}
{
    (
        Def(jobList)
        |
        Statement(jobList)
    )*
    <EOF>
    {return jobList;}
}

void Def(JobList_Obj jobList):
{
}
{
    (
        DefTable(jobList)
        |
        DefArray(jobList)
    )
    {}
}

void DefTable(JobList_Obj jobList):
{
    Token TId_tabName;
    Token TId_tabInitName;
    String tabInitName = null;
}
{
    <TABLE>
    TId_tabName = <VAR_LITERAL>
    <ASSIGN>
    <TABLE>
    <OBRA>
    (
        TId_tabInitName = <VAR_LITERAL>
        {tabInitName = TId_tabInitName.image;}
    )?
    <CBRA>
    {jobList.addJob( new JobDefTable(TId_tabName, TId_tabName.image, tabInitName));}
}


void DefArray(JobList_Obj jobList):
{
    Token TId_arrName;
    JobList_VarValueBase valueJobList;
}
{
    <ARRAY>
    TId_arrName = <VAR_LITERAL>
    <ASSIGN>
    <ARRAY>
    <OBRA>
    (
        valueJobList = Expr()
    )
    <CBRA>
    {jobList.addJob( new JobDefArray(TId_arrName, TId_arrName.image, valueJobList));}
}



void Statement(JobList_Obj jobList):
{
}
{
    (
        VarMethod(jobList)
    )
    {}
}

void VarMethod(JobList_Obj jobList):
{
    Token TId_tabVarName;
}
{
    (
        TId_tabVarName = <VAR_LITERAL>
        <PERIOD>
        (
            SetDefault(jobList, TId_tabVarName)
            |
            Add(jobList, TId_tabVarName)
        )
    )
    {}
}

void SetDefault(JobList_Obj jobList, Token TId_tabVarName):
{
    JobList_VarCell jobCellList = null;
}
{
    (
        <SETDEF>
        <OBRA>
        jobCellList = CellList()
        <CBRA>
    )
    {jobList.addJob( new JobTableSetDefault(TId_tabVarName, TId_tabVarName.image, jobCellList));}
}

void Add(JobList_Obj jobList, Token TId_tabVarName):
{
    JobList_VarCell jobCellList = null;
}
{
    (
        <ADD>
        <OBRA>
        jobCellList = CellList()
        <CBRA>
    )
    {jobList.addJob( new JobTableAdd(TId_tabVarName, TId_tabVarName.image, jobCellList));}
}

JobList_VarCell CellList():
{
    JobBase_VarCell cellJob = null;
    JobList_VarCell jobList = new JobList_VarCell("CellList");

}
{
    (
        cellJob = CellEntry()
        {jobList.addJob(cellJob);}
        (
            <COMMA>
            cellJob = CellEntry()        
            {jobList.addJob(cellJob);}
        )*
    )
    {return jobList;}
}


JobBase_VarCell CellEntry():
{
    JobBase_VarCell cellJob;
}
{
    cellJob = CellVar_VarId()
    |
    cellJob = CellTupl()
    {
        return cellJob;
    }
}


JobBase_VarCell CellVar_VarId():
{
    JobBase_VarCell cellJob; 
    Token   TId_var;
    Token   TId_id = null;
}
{
    (
        TId_var = <VAR_LITERAL>
        (
            <PERIOD>
            <CELL>
            <OBRA>
            TId_id = <ID_LITERAL>
            <CBRA>
        )?
    )
    {
        if (TId_id != null) {
            cellJob = new JobCreateCellVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            cellJob = new JobCreateCellVar(TId_var, TId_var.image);
        }
        return cellJob;
    }
}

JobBase_VarCell CellTupl():
{
    JobBase_VarCell cellJob; 
    JobList_VarValueBase valueJobList;
    Token   TId;
}
{
    <OCBRA>
    TId = <ID_LITERAL>
    <COMMA>
    valueJobList = Expr()
    <CCBRA>
    {
        
        cellJob = new JobCreateCell(TId, TId.image, valueJobList);
        return cellJob;
    }
}

JobList_VarValueBase Expr():
{
    JobList_VarValueBase retValueJobList; 
}
{
    (
        retValueJobList = NumExpr()
        |
        retValueJobList = TxtExpr()
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase NumExpr():
{
    JobList_VarValueBase valueJobList1; 
    JobList_VarValueBase valueJobList2; 
    JobList_VarValueBase retValueJobList; 
    Token   TId;
}
{
    (
        retValueJobList = Term()
        (
            (
                TId = <PLUS>
                |
                TId = <MINUS>
            )
            valueJobList2 = Term()
            { 
                valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("PLUS/MINUS");
                retValueJobList.addJob( new JobCreateValueOperation(TId, TId.image, valueJobList1, valueJobList2));
            }
        )*
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase Term():
{
    JobList_VarValueBase valueJobList1; 
    JobList_VarValueBase valueJobList2; 
    JobList_VarValueBase retValueJobList; 
    Token   TId;
}
{
    (
        retValueJobList = Factor()
        (
            (
                TId = <MUL>
                |
                TId = <DIV>
            )
            valueJobList2 = Factor()
            { 
                valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("MULDIV");
                retValueJobList.addJob( new JobCreateValueOperation(TId, TId.image, valueJobList1, valueJobList2));
            }
        )*
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase Factor():
{
    JobList_VarValueBase retValueJobList; 
}
{
    (
        retValueJobList = ValueVar_VarId()
        |
        retValueJobList = ValueInt()
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase ValueVar_VarId():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId_var;
    Token   TId_id = null;
}
{
    (
        TId_var = <VAR_LITERAL>
        (
            <PERIOD>
            <VALUE>
            <OBRA>
            TId_id = <ID_LITERAL>
            <CBRA>
        )?
    )
    {
        if (TId_id != null) {
            valueJob = new JobCreateValueVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            valueJob = new JobCreateValueVar(TId_var, TId_var.image);
        }
        retValueJobList = new JobList_VarValueBase("ValueVar_VarId");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}

JobList_VarValueBase ValueInt():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId;
}
{
    (
        TId = <DEC_LITERAL>
        |
        TId = <HEX_LITERAL>
    )
    {
        valueJob = new JobCreateValueInt(TId, TId.image);
        retValueJobList = new JobList_VarValueBase("ValueInt");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}

JobList_VarValueBase TxtExpr():
{
    JobList_VarValueBase valueJobList1; 
    JobList_VarValueBase valueJobList2; 
    JobList_VarValueBase retValueJobList; 
    Token   TId;
}
{
    (
        (
            retValueJobList = ValueString()
            |
            retValueJobList = ValueId()
        )
        (
            TId = <PLUS>
            (
                valueJobList2 = ValueString()
                |
                valueJobList2 = ValueId()
                |
                valueJobList2 = ValueInt()
                |
                valueJobList2 = ValueVar_VarId()
            )
            { 
                valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("SPLUS");
                retValueJobList.addJob( new JobCreateValueOperation(TId, "S+", valueJobList1, valueJobList2));
            }
        )*
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase ValueId():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId;
}
{
    (
        TId = <ID_LITERAL>
    )
    {
        valueJob = new JobCreateValueString(TId, TId.image, false);
        retValueJobList = new JobList_VarValueBase("ValueId");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}

JobList_VarValueBase ValueString():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId;
}
{
    (
        TId = <STRING_LITERAL>
    )
    {
        valueJob = new JobCreateValueString(TId, TId.image, true);
        retValueJobList = new JobList_VarValueBase("ValueString");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}
