/* RCD scriptgrammar.jj version 2 using task joblist*/
options
{
    STATIC = false ;
}
PARSER_BEGIN (RcdScript2Parser)
   package org.thingml.rcd_scripter2.parser;
   import org.thingml.rcd_scripter2.jobs.*;
   public class RcdScript2Parser {
         public JobList_Obj makeJobs()throws ParseException, TokenMgrError
   { return(init()) ; }
   }
PARSER_END (RcdScript2Parser)

SKIP: /* WHITE SPACE */ { "\n" | "\r" | "\r\n" |"\\"|"\t"|" "| "//"}

/* COMMENTS */

MORE :
{
  "##" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}



TOKEN [IGNORE_CASE]: /* Commands */
{
  <DEF :("DEF")>
|
  <ADD :("ADD")>
|
  <VARARRAY :("VARARRAY")>
|
  <CELL :("CELL")>
|
  <FILE :("FILE")>
|
  <FOR_EACH :("FOR_EACH")>
|
  <HAS :("HAS")>
|
  <IF :("IF")>
|
  <IN :("IN")>
|
  <INT :("INT")>
|
  <PRINT :("PRINT")>
|
  <ROW :("ROW")>
|
  <SETDEF :("SETDEF")>
|
  <ROWLIST :("ROWLIST")>
}


TOKEN :  /* Literals */
{
  < VAR_LITERAL: <DOLLAR><ID_LITERAL> >
|
  < ID_LITERAL: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < DEC_LITERAL: <DIGIT> (<DIGIT>)* >
|
  < HEX_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :  /* Character groups */
{
  < LETTER: [ "a"-"z", "A"-"Z", "_" ] >
|
  < DIGIT: [ "0"-"9"] >
|
  < HEX_DIGIT: [ "0"-"9", "a"-"f", "A"-"F"] >
}

TOKEN:  /* Separators */
{
    <OBRA:("(")>
|
    <CBRA:(")")>
|
    <OCBRA:("{")>
|
    <CCBRA:("}")>
|
    <OABRA:("[")>
|
    <CABRA:("]")>
|
    <COMMA:(",")>
|
    <PERIOD:(".")>
|
    <SEMI:(";")>
|
    <ASSIGN:("=")>
|
    <DOLLAR:("$")>
|
    <PLUS:("+")>
|
    <MINUS:("-")>
|
    <MUL:("*")>
|
    <DIV:("/")>
}

JobList_Obj  init():
{
  JobList_Obj jobList = new JobList_Obj("Main");
}
{
    Script(jobList)
    <EOF>
    {return jobList;}
}

void Script(JobList_Obj jobList):
{
}
{
    (
        Def(jobList)
        |
        Statement(jobList)
        |
        Block(jobList)
    )*
    {}
}

void Def(JobList_Obj jobList):
{
    Token TId_defVarName;
}
{
    <DEF>
    TId_defVarName = <VAR_LITERAL>
    <ASSIGN>
    (
        DefRowList(jobList, TId_defVarName)
        |
        DefRow(jobList, TId_defVarName)
        |
        DefCell(jobList, TId_defVarName)
        |
//        DefValue(jobList, TId_defVarName)
//        |
        DefVarArray(jobList, TId_defVarName)
    )
    <SEMI>
    {}
}

void DefRowList(JobList_Obj jobList, Token TId_defVarName):
{
    Token TId_tabInitName;
    String tabInitName = null;
}
{
    <ROWLIST>
    <OBRA>
    (
        <ASSIGN>
        TId_tabInitName = <VAR_LITERAL>
        {tabInitName = TId_tabInitName.image;}
    )?
    <CBRA>
    {jobList.addJob( new JobDefRowList(TId_defVarName, TId_defVarName.image, tabInitName));}
}


void DefRow(JobList_Obj jobList, Token TId_defVarName):
{
    Token TId_copyFromRowName = null;
    String copyFromRowName = null;
    JobList_VarCell jobCellList = null;
}
{
    <ROW>
    <OBRA>
    (
        (
            jobCellList = CellList()
            |
            (
                <ASSIGN>
                TId_copyFromRowName = <VAR_LITERAL>
                {copyFromRowName = TId_copyFromRowName.image;}
            )
        )?
    )
    <CBRA>
    {jobList.addJob( new JobDefRow(TId_defVarName, TId_defVarName.image, copyFromRowName, jobCellList));}
}

void DefCell(JobList_Obj jobList, Token TId_defVarName):
{
    Token TId_copyFromCellName = null;
    String copyFromCellName = null;
    JobBase_VarCell jobCell = null;
    JobList_VarCell jobCellList = null;
}
{
    <CELL>
    <OBRA>
    (
        (
            jobCell = CellEntry()
            {
                jobCellList = new JobList_VarCell("DefCell");
                jobCellList.addJob(jobCell);
            }
        )
        |
        (
            <ASSIGN>
            TId_copyFromCellName = <VAR_LITERAL>
            {copyFromCellName = TId_copyFromCellName.image;}
        )
    )
    <CBRA>
    {jobList.addJob( new JobDefCell(TId_defVarName, TId_defVarName.image, copyFromCellName, jobCellList));}
}

//void DefValue(JobList_Obj jobList, Token TId_defVarName):
//{
//    Token TId_copyFromValueName = null;
//    String copyFromValueName = null;
//    JobList_VarValueBase jobValue = null;
//}
//{
//    <VALUE>
//    <OBRA>
//    (
//        jobValue = Expr()
//        |
//        (
//            <ASSIGN>
//            TId_copyFromValueName = <VAR_LITERAL>
//            {copyFromValueName = TId_copyFromValueName.image;}
//        )
//    )
//    <CBRA>
//    {jobList.addJob( new JobDefValue(TId_defVarName, TId_defVarName.image, copyFromValueName, jobValue));}
//}



void DefVarArray(JobList_Obj jobList, Token TId_defVarName):
{
    Token TId_copyFromArrName = null;
    String copyFromArrName = null;
    JobList_VarValueBase valueJobListSize = null;
    JobList_VarValueBase valueJobListDefault = null;
}
{
    <VARARRAY>
    <OBRA>
    (
        (
            valueJobListSize = ValueInt()
            <COMMA>
            valueJobListDefault = Expr()

        )
        |
        (
            <ASSIGN>
            TId_copyFromArrName = <VAR_LITERAL>
            {copyFromArrName = TId_copyFromArrName.image;}
        )
    )
    <CBRA>
    {jobList.addJob( new JobDefVarArray(TId_defVarName, TId_defVarName.image, copyFromArrName, valueJobListSize, valueJobListDefault));}
}



void Statement(JobList_Obj jobList):
{
}
{
    (
        VarMethodOrAssign(jobList)
        |
        Print(jobList)
    )
    <SEMI>
    {}
}

void VarMethodOrAssign(JobList_Obj jobList):
{
    Token TId_varName;
}
{
    TId_varName = <VAR_LITERAL>
    (
        (
            <PERIOD>
            (
                SetDefault(jobList, TId_varName)
                |
                Add(jobList, TId_varName)
            )
        )
        |
        (
            VarNameAssign(jobList, TId_varName)
        )
    )
    {}
}

void SetDefault(JobList_Obj jobList, Token TId_varName):
{
    Token TId_copyVarName = null;
    String copyVarName = null;
    JobList_VarCell jobCellList = null;
}
{
    (
        <SETDEF>
        <OBRA>
        (
            jobCellList = CellList()
            |
            (
            <ASSIGN>
            TId_copyVarName = <VAR_LITERAL>
            { copyVarName = TId_copyVarName.image;}
            )
        )
        <CBRA>
    )
    {jobList.addJob( new JobVarSetDefault(TId_varName, TId_varName.image, copyVarName, jobCellList));}
}

void Add(JobList_Obj jobList, Token TId_varName):
{
    Token TId_copyVarName = null;
    String copyVarName = null;
    JobList_VarCell jobCellList = null;
}
{
    (
        <ADD>
        <OBRA>
        (
            jobCellList = CellList()
            |
            (
            <ASSIGN>
            TId_copyVarName = <VAR_LITERAL>
            { copyVarName = TId_copyVarName.image;}
            )
        )
        <CBRA>
    )
    {jobList.addJob( new JobVarAddCellList(TId_varName, TId_varName.image, copyVarName, jobCellList));}
}

void VarNameAssign(JobList_Obj jobList, Token TId_varName):
{
    JobList_VarValueBase indexValueJobList = null; 
    JobList_VarValueBase valueJobList = null;
}
{
    (
        (
            <OABRA>
            indexValueJobList = NumExpr()
            <CABRA>
        )?
        <ASSIGN>
        valueJobList = Expr()
    )
    {jobList.addJob( new JobVarNameAssign(TId_varName, TId_varName.image, indexValueJobList, valueJobList));}
}


void Print(JobList_Obj jobList):
{
    JobList_VarValueBase retValueJobList; 
    Token TId;
}
{
    (
        TId = <PRINT>
        <OBRA>
        retValueJobList = TxtExpr()
        <CBRA>
    )
    {jobList.addJob( new JobPrint(TId, retValueJobList));}
}

void Block(JobList_Obj jobList):
{
}
{
    (
        ForEach(jobList)
    )
    {}
}

void ForEach(JobList_Obj jobList):
{
    JobList_Obj forEachJobList = new JobList_Obj("ForEach");
    Token TId_loopVar;
    Token TId_inVar;
}
{
    (
        <FOR_EACH>
        <OBRA>
        TId_loopVar = <VAR_LITERAL>
        <IN>
        TId_inVar = <VAR_LITERAL>
        <CBRA>
        <OCBRA>
        Script(forEachJobList)
        <CCBRA>
    )
    {jobList.addJob( new JobForEach(TId_loopVar, TId_loopVar.image, TId_inVar.image, forEachJobList));}
}

JobList_VarCell CellList():
{
    JobBase_VarCell cellJob = null;
    JobList_VarCell jobList = new JobList_VarCell("CellList");

}
{
    (
        cellJob = CellEntry()
        {jobList.addJob(cellJob);}
        (
            <COMMA>
            cellJob = CellEntry()        
            {jobList.addJob(cellJob);}
        )*
    )
    {return jobList;}
}


JobBase_VarCell CellEntry():
{
    JobBase_VarCell cellJob;
}
{
    (
        cellJob = CellVar_VarId()
        |
        cellJob = CellTupl()
    )
    {return cellJob;}
}


JobBase_VarCell CellVar_VarId():
{
    JobBase_VarCell cellJob; 
    Token   TId_var;
    Token   TId_id = null;
}
{
    (
        TId_var = <VAR_LITERAL>
        (
            <PERIOD>
//            <CELL>
//            <OBRA>
            TId_id = <ID_LITERAL>
//            <CBRA>
        )?
    )
    {
        if (TId_id != null) {
            cellJob = new JobCreateCellVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            cellJob = new JobCreateCellVar(TId_var, TId_var.image);
        }
        return cellJob;
    }
}

JobBase_VarCell CellTupl():
{
    JobBase_VarCell cellJob; 
    JobList_VarValueBase valueJobList;
    Token   TId;
}
{
    <OCBRA>
    TId = <ID_LITERAL>
    <COMMA>
    valueJobList = Expr()
    <CCBRA>
    {
        cellJob = new JobCreateCell(TId, TId.image, valueJobList);
        return cellJob;
    }
}

JobList_VarValueBase Expr():
{
    JobList_VarValueBase retValueJobList; 
}
{
    (
        retValueJobList = NumExpr()
        |
        retValueJobList = TxtExpr()
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase NumExpr():
{
    JobList_VarValueBase valueJobList1; 
    JobList_VarValueBase valueJobList2; 
    JobList_VarValueBase retValueJobList; 
    Token   TId;
}
{
    (
        retValueJobList = Term()
        (
            (
                TId = <PLUS>
                |
                TId = <MINUS>
            )
            valueJobList2 = Term()
            { 
                valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("PLUS/MINUS");
                retValueJobList.addJob( new JobCreateValueOperation(TId, TId.image, valueJobList1, valueJobList2));
            }
        )*
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase Term():
{
    JobList_VarValueBase valueJobList1; 
    JobList_VarValueBase valueJobList2; 
    JobList_VarValueBase retValueJobList; 
    Token   TId;
}
{
    (
        retValueJobList = Factor()
        (
            (
                TId = <MUL>
                |
                TId = <DIV>
            )
            valueJobList2 = Factor()
            { 
                valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("MULDIV");
                retValueJobList.addJob( new JobCreateValueOperation(TId, TId.image, valueJobList1, valueJobList2));
            }
        )*
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase Factor():
{
    JobList_VarValueBase retValueJobList; 
}
{
    (
        retValueJobList = ValueVar_VarId_VarIndex()
        |
        retValueJobList = ValueInt()
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase ValueVar_VarId_VarIndex():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId_var;
    Token   TId_id = null;
    JobList_VarValueBase indexValueJobList = null; 
}
{
    (
        TId_var = <VAR_LITERAL>
        (
            (
                <PERIOD>
                TId_id = <ID_LITERAL>
            )
            |
            (
                <OABRA>
                indexValueJobList = NumExpr()
                <CABRA>
            )

        )?
    )
    {
        if (TId_id != null) {
            valueJob = new JobCreateValueVarId(TId_var, TId_var.image, TId_id.image);
        } else if (indexValueJobList != null) {
            valueJob = new JobCreateValueVarIndex(TId_var, TId_var.image, indexValueJobList);
        } else {
            valueJob = new JobCreateValueVar(TId_var, TId_var.image);
        }
        retValueJobList = new JobList_VarValueBase("ValueVar_VarId");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}

JobList_VarValueBase ValueInt():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId;
}
{
    (
        TId = <DEC_LITERAL>
        |
        TId = <HEX_LITERAL>
    )
    {
        valueJob = new JobCreateValueInt(TId, TId.image);
        retValueJobList = new JobList_VarValueBase("ValueInt");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}

JobList_VarValueBase TxtExpr():
{
    JobList_VarValueBase valueJobList1; 
    JobList_VarValueBase valueJobList2; 
    JobList_VarValueBase retValueJobList; 
    Token   TId;
}
{
    (
        (
            retValueJobList = ValueString()
            |
            retValueJobList = ValueId()
        )
        (
            TId = <PLUS>
            (
                valueJobList2 = ValueString()
                |
                valueJobList2 = ValueId()
                |
                valueJobList2 = ValueInt()
                |
                valueJobList2 = ValueVar_VarId_VarIndex()
            )
            { 
                valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("SPLUS");
                retValueJobList.addJob( new JobCreateValueOperation(TId, "S+", valueJobList1, valueJobList2));
            }
        )*
    )
    {
        return retValueJobList;
    }
}

JobList_VarValueBase ValueId():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId;
}
{
    (
        TId = <ID_LITERAL>
    )
    {
        valueJob = new JobCreateValueString(TId, TId.image, false);
        retValueJobList = new JobList_VarValueBase("ValueId");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}

JobList_VarValueBase ValueString():
{
    JobList_VarValueBase retValueJobList; 
    JobBase_VarValueBase valueJob; 
    Token   TId;
}
{
    (
        TId = <STRING_LITERAL>
    )
    {
        valueJob = new JobCreateValueString(TId, TId.image, true);
        retValueJobList = new JobList_VarValueBase("ValueString");
        retValueJobList.addJob( valueJob );
        return retValueJobList;
    }
}
