/* RcdScript2Parser.java */
/* Generated By:JavaCC: Do not edit this line. RcdScript2Parser.java */
   package org.thingml.rcd_scripter2.parser;
   import org.thingml.rcd_scripter2.jobs.*;
   public class RcdScript2Parser implements RcdScript2ParserConstants {
         public JobList_Obj makeJobs()throws ParseException, TokenMgrError
   { return(init()) ; }

  final public JobList_Obj init() throws ParseException {JobList_Obj jobList = new JobList_Obj("Main");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:
      case VAR_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        Def(jobList);
        break;
        }
      case VAR_LITERAL:{
        Statement(jobList);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return jobList;}
    throw new Error("Missing return statement in function");
  }

  final public void Def(JobList_Obj jobList) throws ParseException {Token TId_defVarName;
    jj_consume_token(DEF);
    TId_defVarName = jj_consume_token(VAR_LITERAL);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TABLE:{
      DefTable(jobList, TId_defVarName);
      break;
      }
    case ROW:{
      DefRow(jobList, TId_defVarName);
      break;
      }
    case CELL:{
      DefCell(jobList, TId_defVarName);
      break;
      }
    case VALUE:{
      DefValue(jobList, TId_defVarName);
      break;
      }
    case ARRAY:{
      DefArray(jobList, TId_defVarName);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void DefTable(JobList_Obj jobList, Token TId_defVarName) throws ParseException {Token TId_tabInitName;
    String tabInitName = null;
    jj_consume_token(TABLE);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      TId_tabInitName = jj_consume_token(VAR_LITERAL);
tabInitName = TId_tabInitName.image;
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobDefTable(TId_defVarName, TId_defVarName.image, tabInitName));
  }

  final public void DefRow(JobList_Obj jobList, Token TId_defVarName) throws ParseException {Token TId_copyFromRowName = null;
    String copyFromRowName = null;
    JobList_VarCell jobCellList = null;
    jj_consume_token(ROW);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:
    case OCBRA:{
      jobCellList = CellList();
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      TId_copyFromRowName = jj_consume_token(VAR_LITERAL);
copyFromRowName = TId_copyFromRowName.image;
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobDefRow(TId_defVarName, TId_defVarName.image, copyFromRowName, jobCellList));
  }

  final public void DefCell(JobList_Obj jobList, Token TId_defVarName) throws ParseException {Token TId_copyFromCellName = null;
    String copyFromCellName = null;
    JobBase_VarCell jobCell = null;
    JobList_VarCell jobCellList = null;
    jj_consume_token(CELL);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:
    case OCBRA:{
      jobCell = CellEntry();
jobCellList = new JobList_VarCell("DefCell");
                jobCellList.addJob(jobCell);
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      TId_copyFromCellName = jj_consume_token(VAR_LITERAL);
copyFromCellName = TId_copyFromCellName.image;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobDefCell(TId_defVarName, TId_defVarName.image, copyFromCellName, jobCellList));
  }

  final public void DefValue(JobList_Obj jobList, Token TId_defVarName) throws ParseException {Token TId_copyFromValueName = null;
    String copyFromValueName = null;
    JobList_VarValueBase jobValue = null;
    jj_consume_token(VALUE);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:
    case ID_LITERAL:
    case DEC_LITERAL:
    case HEX_LITERAL:
    case STRING_LITERAL:{
      jobValue = Expr();
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      TId_copyFromValueName = jj_consume_token(VAR_LITERAL);
copyFromValueName = TId_copyFromValueName.image;
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobDefValue(TId_defVarName, TId_defVarName.image, copyFromValueName, jobValue));
  }

  final public void DefArray(JobList_Obj jobList, Token TId_defVarName) throws ParseException {Token TId_copyFromArrName = null;
    String copyFromArrName = null;
    JobList_VarValueBase valueJobListSize = null;
    JobList_VarValueBase valueJobListDefault = null;
    jj_consume_token(ARRAY);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEC_LITERAL:
    case HEX_LITERAL:{
      valueJobListSize = ValueInt();
      jj_consume_token(COMMA);
      valueJobListDefault = Expr();
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      TId_copyFromArrName = jj_consume_token(VAR_LITERAL);
copyFromArrName = TId_copyFromArrName.image;
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobDefArray(TId_defVarName, TId_defVarName.image, copyFromArrName, valueJobListSize, valueJobListDefault));
  }

  final public void Statement(JobList_Obj jobList) throws ParseException {
    VarMethod(jobList);

  }

  final public void VarMethod(JobList_Obj jobList) throws ParseException {Token TId_varName;
    TId_varName = jj_consume_token(VAR_LITERAL);
    jj_consume_token(PERIOD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SETDEF:{
      SetDefault(jobList, TId_varName);
      break;
      }
    case ADD:{
      Add(jobList, TId_varName);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void SetDefault(JobList_Obj jobList, Token TId_varName) throws ParseException {Token TId_copyVarName = null;
    String copyVarName = null;
    JobList_VarCell jobCellList = null;
    jj_consume_token(SETDEF);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:
    case OCBRA:{
      jobCellList = CellList();
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      TId_copyVarName = jj_consume_token(VAR_LITERAL);
copyVarName = TId_copyVarName.image;
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobVarSetDefault(TId_varName, TId_varName.image, copyVarName, jobCellList));
  }

  final public void Add(JobList_Obj jobList, Token TId_varName) throws ParseException {Token TId_copyVarName = null;
    String copyVarName = null;
    JobList_VarCell jobCellList = null;
    jj_consume_token(ADD);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:
    case OCBRA:{
      jobCellList = CellList();
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      TId_copyVarName = jj_consume_token(VAR_LITERAL);
copyVarName = TId_copyVarName.image;
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobVarAddCellList(TId_varName, TId_varName.image, copyVarName, jobCellList));
  }

  final public JobList_VarCell CellList() throws ParseException {JobBase_VarCell cellJob = null;
    JobList_VarCell jobList = new JobList_VarCell("CellList");
    cellJob = CellEntry();
jobList.addJob(cellJob);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      cellJob = CellEntry();
jobList.addJob(cellJob);
    }
{if ("" != null) return jobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase_VarCell CellEntry() throws ParseException {JobBase_VarCell cellJob;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:{
      cellJob = CellVar_VarId();
      break;
      }
    case OCBRA:{
      cellJob = CellTupl();
{if ("" != null) return cellJob;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public JobBase_VarCell CellVar_VarId() throws ParseException {JobBase_VarCell cellJob;
    Token   TId_var;
    Token   TId_id = null;
    TId_var = jj_consume_token(VAR_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      jj_consume_token(CELL);
      jj_consume_token(OBRA);
      TId_id = jj_consume_token(ID_LITERAL);
      jj_consume_token(CBRA);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
if (TId_id != null) {
            cellJob = new JobCreateCellVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            cellJob = new JobCreateCellVar(TId_var, TId_var.image);
        }
        {if ("" != null) return cellJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase_VarCell CellTupl() throws ParseException {JobBase_VarCell cellJob;
    JobList_VarValueBase valueJobList;
    Token   TId;
    jj_consume_token(OCBRA);
    TId = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    valueJobList = Expr();
    jj_consume_token(CCBRA);
cellJob = new JobCreateCell(TId, TId.image, valueJobList);
        {if ("" != null) return cellJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase Expr() throws ParseException {JobList_VarValueBase retValueJobList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:
    case DEC_LITERAL:
    case HEX_LITERAL:{
      retValueJobList = NumExpr();
      break;
      }
    case ID_LITERAL:
    case STRING_LITERAL:{
      retValueJobList = TxtExpr();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase NumExpr() throws ParseException {JobList_VarValueBase valueJobList1;
    JobList_VarValueBase valueJobList2;
    JobList_VarValueBase retValueJobList;
    Token   TId;
    retValueJobList = Term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        TId = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        TId = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      valueJobList2 = Term();
valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("PLUS/MINUS");
                retValueJobList.addJob( new JobCreateValueOperation(TId, TId.image, valueJobList1, valueJobList2));
    }
{if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase Term() throws ParseException {JobList_VarValueBase valueJobList1;
    JobList_VarValueBase valueJobList2;
    JobList_VarValueBase retValueJobList;
    Token   TId;
    retValueJobList = Factor();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        TId = jj_consume_token(MUL);
        break;
        }
      case DIV:{
        TId = jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      valueJobList2 = Factor();
valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("MULDIV");
                retValueJobList.addJob( new JobCreateValueOperation(TId, TId.image, valueJobList1, valueJobList2));
    }
{if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase Factor() throws ParseException {JobList_VarValueBase retValueJobList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:{
      retValueJobList = ValueVar_VarId();
      break;
      }
    case DEC_LITERAL:
    case HEX_LITERAL:{
      retValueJobList = ValueInt();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase ValueVar_VarId() throws ParseException {JobList_VarValueBase retValueJobList;
    JobBase_VarValueBase valueJob;
    Token   TId_var;
    Token   TId_id = null;
    TId_var = jj_consume_token(VAR_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      jj_consume_token(VALUE);
      jj_consume_token(OBRA);
      TId_id = jj_consume_token(ID_LITERAL);
      jj_consume_token(CBRA);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
if (TId_id != null) {
            valueJob = new JobCreateValueVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            valueJob = new JobCreateValueVar(TId_var, TId_var.image);
        }
        retValueJobList = new JobList_VarValueBase("ValueVar_VarId");
        retValueJobList.addJob( valueJob );
        {if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase ValueInt() throws ParseException {JobList_VarValueBase retValueJobList;
    JobBase_VarValueBase valueJob;
    Token   TId;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEC_LITERAL:{
      TId = jj_consume_token(DEC_LITERAL);
      break;
      }
    case HEX_LITERAL:{
      TId = jj_consume_token(HEX_LITERAL);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
valueJob = new JobCreateValueInt(TId, TId.image);
        retValueJobList = new JobList_VarValueBase("ValueInt");
        retValueJobList.addJob( valueJob );
        {if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase TxtExpr() throws ParseException {JobList_VarValueBase valueJobList1;
    JobList_VarValueBase valueJobList2;
    JobList_VarValueBase retValueJobList;
    Token   TId;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      retValueJobList = ValueString();
      break;
      }
    case ID_LITERAL:{
      retValueJobList = ValueId();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      TId = jj_consume_token(PLUS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        valueJobList2 = ValueString();
        break;
        }
      case ID_LITERAL:{
        valueJobList2 = ValueId();
        break;
        }
      case DEC_LITERAL:
      case HEX_LITERAL:{
        valueJobList2 = ValueInt();
        break;
        }
      case VAR_LITERAL:{
        valueJobList2 = ValueVar_VarId();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
valueJobList1 = retValueJobList;
                retValueJobList = new JobList_VarValueBase("SPLUS");
                retValueJobList.addJob( new JobCreateValueOperation(TId, "S+", valueJobList1, valueJobList2));
    }
{if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase ValueId() throws ParseException {JobList_VarValueBase retValueJobList;
    JobBase_VarValueBase valueJob;
    Token   TId;
    TId = jj_consume_token(ID_LITERAL);
valueJob = new JobCreateValueString(TId, TId.image, false);
        retValueJobList = new JobList_VarValueBase("ValueId");
        retValueJobList.addJob( valueJob );
        {if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobList_VarValueBase ValueString() throws ParseException {JobList_VarValueBase retValueJobList;
    JobBase_VarValueBase valueJob;
    Token   TId;
    TId = jj_consume_token(STRING_LITERAL);
valueJob = new JobCreateValueString(TId, TId.image, true);
        retValueJobList = new JobList_VarValueBase("ValueString");
        retValueJobList.addJob( valueJob );
        {if ("" != null) return retValueJobList;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RcdScript2ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000800,0x4000800,0x3406000,0x0,0x4000000,0x4000000,0x7c000000,0x30000000,0x801000,0x4000000,0x4000000,0x0,0x4000000,0x0,0x7c000000,0x0,0x0,0x0,0x0,0x34000000,0x0,0x30000000,0x48000000,0x0,0x7c000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x100,0x110,0x110,0x100,0x100,0x0,0x110,0x110,0x40,0x10,0x80,0x0,0xc00,0xc00,0x3000,0x3000,0x0,0x80,0x0,0x0,0x400,0x0,};
   }

  /** Constructor with InputStream. */
  public RcdScript2Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RcdScript2Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RcdScript2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RcdScript2Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RcdScript2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new RcdScript2ParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RcdScript2Parser(RcdScript2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RcdScript2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

   }
