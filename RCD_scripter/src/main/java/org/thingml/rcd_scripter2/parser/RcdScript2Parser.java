/* RcdScript2Parser.java */
/* Generated By:JavaCC: Do not edit this line. RcdScript2Parser.java */
   package org.thingml.rcd_scripter2.parser;
   import org.thingml.rcd_scripter2.jobs.*;
   public class RcdScript2Parser implements RcdScript2ParserConstants {
         public JobList makeJobs()throws ParseException, TokenMgrError
   { return(init()) ; }

  final public JobList init() throws ParseException {JobList jobList = new JobList("Main");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TABLE:
      case VAR_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TABLE:{
        Def(jobList);
        break;
        }
      case VAR_LITERAL:{
        Statement(jobList);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return jobList;}
    throw new Error("Missing return statement in function");
  }

  final public void Def(JobList jobList) throws ParseException {
    DefTable(jobList);

  }

  final public void DefTable(JobList jobList) throws ParseException {Token TId_tabName;
    Token TId_tabInitName;
    String tabInitName = null;
    jj_consume_token(TABLE);
    TId_tabName = jj_consume_token(VAR_LITERAL);
    jj_consume_token(ASSIGN);
    jj_consume_token(TABLE);
    jj_consume_token(OBRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:{
      TId_tabInitName = jj_consume_token(VAR_LITERAL);
tabInitName = TId_tabInitName.image;
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(CBRA);
jobList.addJob( new JobDefTable(TId_tabName, TId_tabName.image, tabInitName));
  }

  final public void Statement(JobList jobList) throws ParseException {
    VarMethod(jobList);

  }

  final public void VarMethod(JobList jobList) throws ParseException {Token TId_tabVarName;
    TId_tabVarName = jj_consume_token(VAR_LITERAL);
    jj_consume_token(PERIOD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SETDEF:{
      SetDefault(jobList, TId_tabVarName);
      break;
      }
    case ADD:{
      Add(jobList, TId_tabVarName);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void SetDefault(JobList jobList, Token TId_tabVarName) throws ParseException {JobList jobCellList = null;
    jj_consume_token(SETDEF);
    jj_consume_token(OBRA);
    jobCellList = CellList();
    jj_consume_token(CBRA);
jobList.addJob( new JobTableSetDefault(TId_tabVarName, TId_tabVarName.image, jobCellList));
  }

  final public void Add(JobList jobList, Token TId_tabVarName) throws ParseException {JobList jobCellList = null;
    jj_consume_token(ADD);
    jj_consume_token(OBRA);
    jobCellList = CellList();
    jj_consume_token(CBRA);
jobList.addJob( new JobTableAdd(TId_tabVarName, TId_tabVarName.image, jobCellList));
  }

  final public JobList CellList() throws ParseException {JobBase cellJob = null;
    JobList jobList = new JobList("CellList");
    cellJob = CellEntry();
jobList.addJob(cellJob);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      cellJob = CellEntry();
jobList.addJob(cellJob);
    }
{if ("" != null) return jobList;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase CellEntry() throws ParseException {JobBase cellJob;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:{
      cellJob = CellVar_VarId();
      break;
      }
    case OCBRA:{
      cellJob = CellTupl();
{if ("" != null) return cellJob;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public JobBase CellVar_VarId() throws ParseException {JobBase cellJob;
    Token   TId_var;
    Token   TId_id = null;
    TId_var = jj_consume_token(VAR_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      jj_consume_token(CELL);
      jj_consume_token(OBRA);
      TId_id = jj_consume_token(ID_LITERAL);
      jj_consume_token(CBRA);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
if (TId_id != null) {
            cellJob = new JobCreateCellVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            cellJob = new JobCreateCellVar(TId_var, TId_var.image);
        }
        {if ("" != null) return cellJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase CellTupl() throws ParseException {JobBase cellJob;
    JobBase valueJob;
    Token   TId;
    jj_consume_token(OCBRA);
    TId = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_LITERAL:{
      valueJob = ValueVar_VarId();
      break;
      }
    case DEC_LITERAL:
    case HEX_LITERAL:{
      valueJob = ValueInt();
      break;
      }
    case ID_LITERAL:{
      valueJob = ValueId();
      break;
      }
    case STRING_LITERAL:{
      valueJob = ValueConcatString();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CCBRA);
cellJob = new JobCreateCell(TId, TId.image, valueJob);
        {if ("" != null) return cellJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase ValueVar_VarId() throws ParseException {JobBase valueJob;
    Token   TId_var;
    Token   TId_id = null;
    TId_var = jj_consume_token(VAR_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      jj_consume_token(VALUE);
      jj_consume_token(OBRA);
      TId_id = jj_consume_token(ID_LITERAL);
      jj_consume_token(CBRA);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
if (TId_id != null) {
            valueJob = new JobCreateValueVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            valueJob = new JobCreateValueVar(TId_var, TId_var.image);
        }
        {if ("" != null) return valueJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase ValueInt() throws ParseException {JobBase valueJob;
    Token   TId;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEC_LITERAL:{
      TId = jj_consume_token(DEC_LITERAL);
      break;
      }
    case HEX_LITERAL:{
      TId = jj_consume_token(HEX_LITERAL);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
valueJob = new JobCreateValueInt(TId, TId.image);
        {if ("" != null) return valueJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase ValueId() throws ParseException {JobBase valueJob;
    Token   TId;
    TId = jj_consume_token(ID_LITERAL);
valueJob = new JobCreateValueId(TId, TId.image);
        {if ("" != null) return valueJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase ValueConcatString() throws ParseException {JobBase stringJob = null;
    JobList jobList = new JobList("ValueConcatString");

    JobBase valueJob;
    Token   TId;
    TId = jj_consume_token(STRING_LITERAL);
stringJob = new JobCreateString(TId, TId.image);
            jobList.addJob(stringJob);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(PLUS);
      stringJob = CSelement();
jobList.addJob(stringJob);
    }
{if ("" != null) return new JobCreateValueConcatString(TId, jobList);}
    throw new Error("Missing return statement in function");
  }

  final public JobBase CSelement() throws ParseException {JobBase stringJob;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      stringJob = CString();
      break;
      }
    case VAR_LITERAL:{
      stringJob = CStringVar_VarId();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return stringJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase CString() throws ParseException {JobBase stringJob;
    Token   TId;
    TId = jj_consume_token(STRING_LITERAL);
stringJob = new JobCreateString(TId, TId.image);
        {if ("" != null) return stringJob;}
    throw new Error("Missing return statement in function");
  }

  final public JobBase CStringVar_VarId() throws ParseException {JobBase stringJob;
    Token   TId_var;
    Token   TId_id = null;
    TId_var = jj_consume_token(VAR_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      jj_consume_token(VALUE);
      jj_consume_token(OBRA);
      TId_id = jj_consume_token(ID_LITERAL);
      jj_consume_token(CBRA);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
if (TId_id != null) {
            stringJob = new JobCreateStringVarId(TId_var, TId_var.image, TId_id.image);
        } else {
            stringJob = new JobCreateStringVar(TId_var, TId_var.image);
        }
        {if ("" != null) return stringJob;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RcdScript2ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1400000,0x1400000,0x1000000,0x200800,0x0,0x1000000,0x0,0x1f000000,0x0,0xc000000,0x0,0x11000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x10,0x4,0x20,0x0,0x20,0x0,0x100,0x0,0x20,};
   }

  /** Constructor with InputStream. */
  public RcdScript2Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RcdScript2Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RcdScript2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RcdScript2Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RcdScript2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new RcdScript2ParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RcdScript2Parser(RcdScript2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RcdScript2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

   }
