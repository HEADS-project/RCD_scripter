/* RcdScriptParser.java */
/* Generated By:JavaCC: Do not edit this line. RcdScriptParser.java */
   package org.thingml.rcd_scripter;
   import java.util.ArrayList;
   import java.util.HashMap;
   class RcdScriptParser implements RcdScriptParserConstants {
         TableList executeScript()throws ParseException, TokenMgrError
   { return(init()) ; }

  final public TableList init() throws ParseException {Token T;
  TableList tableList = new TableList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CR_TAB:
      case CR_TAB_IF_EQ:
      case CR_TAB_JOIN:
      case CR_COL_DEF:
      case CR_COL_CAT:
      case CR_ROW:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CR_TAB:{
        Create_table(tableList);
        break;
        }
      case CR_TAB_IF_EQ:{
        Create_table_if_eq(tableList);
        break;
        }
      case CR_TAB_JOIN:{
        Create_table_join(tableList);
        break;
        }
      case CR_COL_CAT:{
        Create_columns_concat(tableList);
        break;
        }
      case CR_COL_DEF:{
        Create_columns_default(tableList);
        break;
        }
      case CR_ROW:{
        Create_row(tableList);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return tableList;}
    throw new Error("Missing return statement in function");
  }

  final public void Create_table(TableList tableList) throws ParseException {Token TId;
    jj_consume_token(CR_TAB);
    jj_consume_token(OBRA);
    TId = jj_consume_token(ID_LITERAL);
    jj_consume_token(CBRA);
tableList.createTable(TId.image);
  }

  final public void Create_table_if_eq(TableList tableList) throws ParseException {Token TId_newtab;
    Token TId_orgtab;
    CellObj cell;
    jj_consume_token(CR_TAB_IF_EQ);
    jj_consume_token(OBRA);
    TId_newtab = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_orgtab = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    cell = Cell_entry();
    jj_consume_token(CBRA);
tableList.createTableIfEq(TId_newtab.image, TId_orgtab.image, cell);
  }

  final public void Create_table_join(TableList tableList) throws ParseException {Token TId_newtab;
    Token TId_orgtab;
    Token TId_orgcol;
    Token TId_jointab;
    Token TId_joincol;
    jj_consume_token(CR_TAB_JOIN);
    jj_consume_token(OBRA);
    TId_newtab = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_orgtab = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_orgcol = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_jointab = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_joincol = jj_consume_token(ID_LITERAL);
    jj_consume_token(CBRA);
tableList.createTableJoin(TId_newtab.image, TId_orgtab.image, TId_orgcol.image, TId_jointab.image, TId_joincol.image);
  }

  final public void Create_columns_concat(TableList tableList) throws ParseException {Token TId_tab;
    Token TId_newcol;
    Token TId_orgcol1;
    Token TId_orgcol2;
    jj_consume_token(CR_COL_CAT);
    jj_consume_token(OBRA);
    TId_tab = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_newcol = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_orgcol1 = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    TId_orgcol2 = jj_consume_token(ID_LITERAL);
    jj_consume_token(CBRA);
tableList.tableCreateColumnsConcat(TId_tab.image, TId_newcol.image, TId_orgcol1.image, TId_orgcol2.image);
  }

  final public void Create_columns_default(TableList tableList) throws ParseException {RowObj row;
    CellObj cell;
    Token TId;
    jj_consume_token(CR_COL_DEF);
    jj_consume_token(OBRA);
    TId = jj_consume_token(ID_LITERAL);
row = tableList.getDefaultRowObj(TId.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      cell = Cell_entry();
row.addCell(cell);
    }
    jj_consume_token(CBRA);
  }

  final public void Create_row(TableList tableList) throws ParseException {RowObj row;
    CellObj cell;
    Token TId;
    jj_consume_token(CR_ROW);
    jj_consume_token(OBRA);
    TId = jj_consume_token(ID_LITERAL);
row = tableList.getNewRowObj(TId.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      cell = Cell_entry();
row.addCell(cell);
    }
    jj_consume_token(CBRA);
  }

  final public CellObj Cell_entry() throws ParseException {CellObj cell;
    Token   TId;
    jj_consume_token(OCBRA);
    TId = jj_consume_token(ID_LITERAL);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEC_LITERAL:
    case HEX_LITERAL:{
      cell = Cell_int();
      break;
      }
    case ID_LITERAL:{
      cell = Cell_id();
      break;
      }
    case STRING_LITERAL:{
      cell = Cell_string();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CCBRA);
cell.setId(TId.image);
        {if ("" != null) return cell;}
    throw new Error("Missing return statement in function");
  }

  final public CellObj Cell_int() throws ParseException {IntCellObj cell = new IntCellObj();
    Token   TId;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEC_LITERAL:{
      TId = jj_consume_token(DEC_LITERAL);
      break;
      }
    case HEX_LITERAL:{
      TId = jj_consume_token(HEX_LITERAL);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
cell.setImage(TId.image);
        {if ("" != null) return cell;}
    throw new Error("Missing return statement in function");
  }

  final public CellObj Cell_id() throws ParseException {IdCellObj cell = new IdCellObj();
    Token   TId;
    TId = jj_consume_token(ID_LITERAL);
cell.setImage(TId.image);
{if ("" != null) return cell;}
    throw new Error("Missing return statement in function");
  }

  final public CellObj Cell_string() throws ParseException {StringCellObj cell = new StringCellObj();
    Token   TId;
    TId = jj_consume_token(STRING_LITERAL);
cell.setImage(TId.image);
{if ("" != null) return cell;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RcdScriptParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1f800,0x1f800,0x10000000,0x10000000,0x1e0000,0xc0000,};
   }

  /** Constructor with InputStream. */
  public RcdScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RcdScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RcdScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RcdScriptParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RcdScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new RcdScriptParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RcdScriptParser(RcdScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RcdScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

   }
