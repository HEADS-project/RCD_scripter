/**
 * Copyright (C) 2016 SINTEF <steffen.dalgard@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// *********************************************************
//   This file is autogenerated by RCD_scripter DO NOT EDIT this file.
// *********************************************************


#ifndef APP_MSGC_CODERDECL_GEN_C
#define APP_MSGC_CODERDECL_GEN_C    

#define DECODER_IN_USE_NONE
#define DECODER_IN_USE_U16
#define DECODER_IN_USE_U16U16
#define DECODER_IN_USE_U8ARR14

typedef error_t (*encoder_fptr_t) (msg_t *msg_ptr, const uint32_t portnum, const msgc_t *mc_ptr);

static error_t MsgcEncoderNONE(msg_t *msg_ptr, const uint32_t portnum, const msgc_t *mc_ptr);
static error_t MsgcEncoderU16(msg_t *msg_ptr, const uint32_t portnum, const msgc_t *mc_ptr);
static error_t MsgcEncoderU16U16(msg_t *msg_ptr, const uint32_t portnum, const msgc_t *mc_ptr);
static error_t MsgcEncoderU8ARR14(msg_t *msg_ptr, const uint32_t portnum, const msgc_t *mc_ptr);

static const encoder_fptr_t _encoderTypeFptrArr[MSGC_TYPE_MAX] = {
    &MsgcEncoderNONE,
    &MsgcEncoderU16,
    &MsgcEncoderU16U16,
    &MsgcEncoderU8ARR14,
};

/*********************************************************************/

typedef error_t (*decoder_fptr_t) (const msg_t *msg_ptr, msgc_t *mc_ptr);

static error_t MsgcDecoderNONE(const msg_t *msg_ptr, msgc_t *mc_ptr);
static error_t MsgcDecoderU16(const msg_t *msg_ptr, msgc_t *mc_ptr);
static error_t MsgcDecoderU16U16(const msg_t *msg_ptr, msgc_t *mc_ptr);
static error_t MsgcDecoderU8ARR14(const msg_t *msg_ptr, msgc_t *mc_ptr);

static const decoder_fptr_t _decoderTypeFptrArr[MSGC_TYPE_MAX] = {
    &MsgcDecoderNONE,
    &MsgcDecoderU16,
    &MsgcDecoderU16U16,
    &MsgcDecoderU8ARR14,
};
#endif
// END OF FILE
