/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. RCD_scripter3.jj */
/*@egen*//* RCD scriptgrammar.jj version 2 using task joblist*/
options {
             
                         
                                                  
  STATIC = false ;
}

PARSER_BEGIN (RcdScript3Parser)
   package org.thingml.rcd_scripter3.parser;
   import java.io.FileReader;
   public class RcdScript3Parser/*@bgen(jjtree)*/implements RcdScript3ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRcdScript3ParserState jjtree = new JJTRcdScript3ParserState();

/*@egen*/
        private String fileName;
        public ASTRcdStart makeAst()throws ParseException, TokenMgrError
        {
            token_source.defaultLexState = IN_RCD_SKIP_REGION; 
            token_source.curLexState = IN_RCD_SKIP_REGION; 
                return(Start()); 
        }

        public void setFileName(String name) {
            fileName = name;
        }

   }
PARSER_END (RcdScript3Parser)

SKIP: /* WHITE SPACE */ { "\n" | "\r" | "\r\n" | "\\" | "\t" | " " | "//" | "*/" | "/*"}

/* COMMENTS */

MORE :
{
  "RCD_SCRIPT_STOP" : IN_RCD_SKIP_REGION
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "##" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}


<IN_RCD_SKIP_REGION>
SPECIAL_TOKEN :
{
  <RCD_SKIP_REGION: "RCD_SCRIPT_START" > : DEFAULT
}

<IN_RCD_SKIP_REGION>
MORE :
{
  < ~[] >
}



TOKEN [IGNORE_CASE]: /* Commands */
{
  <INCLUDE :("INCLUDE")>
|
  <DEF :("DEF")>
|
  <ADD :("ADD")>
|
  <VARARRAY :("VARARRAY")>
|
  <KEYVALUE :("KEYVALUE")>
|
  <FILE :("FILE")>
|
  <CLOSE :("CLOSE")>
|
  <FOR_EACH :("FOR_EACH")>
|
  <HAS :("HAS")>
|
  <IF:("IF")>
|
  <IF_ROW:("IF_ROW")>
|
  <ELSE:("ELSE")>
|
  <IN :("IN")>
|
  <INT :("INT")>
|
  <PRINT :("PRINT")>
|
  <PRINTLN :("PRINTLN")>
|
  <HASH :("HASH")>
|
  <SETDEF :("SETDEF")>
|
  <HASHLIST :("HASHLIST")>
}


TOKEN :  /* Literals */
{
  < VAR_LITERAL: <DOLLAR><ID_LITERAL> >
|
  < ID_LITERAL: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < DEC_LITERAL: (["+","-"])? (<DIGIT>)+ >
|
  < FLOAT_LITERAL: (["+","-"])? (<DIGIT>)+ <PERIOD> (<DIGIT>)+ (<DECIMAL_EXPONENT>)? >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < HEX_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :  /* Character groups */
{
  < LETTER: [ "a"-"z", "A"-"Z", "_" ] >
|
  < DIGIT: [ "0"-"9"] >
|
  < HEX_DIGIT: [ "0"-"9", "a"-"f", "A"-"F"] >
}

TOKEN:  /* Separators */
{
    <OBRA:("(")>
|
    <CBRA:(")")>
|
    <OCBRA:("{")>
|
    <CCBRA:("}")>
|
    <OABRA:("[")>
|
    <CABRA:("]")>
|
    <COMMA:(",")>
|
    <PERIOD:(".")>
|
    <SEMI:(";")>
|
    <COLON:(":")>
|
    <ASSIGN:("=")>
|
    <EQUAL:("==")>
|
    <GT:(">")>
|
    <LT:("<")>
|
    <GTE:(">=")>
|
    <LTE:("<=")>
|
    <NOTEQUAL:("!=")>
|
    <DOLLAR:("$")>
|
    <PLUS:("+")>
|
    <MINUS:("-")>
|
    <MUL:("*")>
|
    <DIV:("/")>
}


ASTRcdStart Start()           : {/*@bgen(jjtree) RcdStart */
  ASTRcdStart jjtn000 = new ASTRcdStart(JJTRCDSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RcdStart */
        try {
/*@egen*/
	Script()
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Script() : {}
{
    (
		Include()
		|
        Def()
        |
        Block()
        |
        Statement()
    )*
}

void Include() :
{
    Token t;
	String fileName;
    RcdScript3Parser subParser;
    ASTRcdStart subAst;
}
{
    <INCLUDE>
    <OBRA>
    t = <STRING_LITERAL>
    <CBRA>
    <SEMI>
    {
        fileName = t.image.substring(0, t.image.length()-1).substring(1); // Remove quotes
		System.out.println("Starting to include " + fileName);
        try{
			subParser = new RcdScript3Parser(new FileReader(fileName)); 
			subAst = subParser.makeAst(); 
            subAst.dump("Include: ");
			
			if (subAst.children != null) {
				for (int i = 0; i < subAst.children.length; ++i) {
					jjtree.openNodeScope(subAst.children[i]);
					jjtree.closeNodeScope(subAst.children[i], true);
				}
			}
		}
        catch (Exception ex) 
        {
            ex.printStackTrace();
        }
		System.out.println("End of include " + fileName);
	}
}

// ************* Def xxx ***************
void Def() : 
{
    Token t;
}
{
    <DEF>
    t = <VAR_LITERAL>
    <ASSIGN>
    (
        DefHashList(t)
        |
        DefHash(t)
//        |
//        DefKeyValue()
//        |
//        DefValue(jobList, TId_defVarName)
        |
        DefVarArray(t)
        |
        DefFile(t)
    )
    <SEMI>
}

void DefHashList(Token t)                 :
{/*@bgen(jjtree) RcdDefHashList */
  ASTRcdDefHashList jjtn000 = new ASTRcdDefHashList(JJTRCDDEFHASHLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdDefHashList */
    try {
/*@egen*/
    <HASHLIST>
    <OBRA>
    (
        Var()
    )?
    <CBRA>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	    jjtn000.setName(t.image);
        jjtn000.setToken(token);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void DefHash(Token t)             :
{/*@bgen(jjtree) RcdDefHash */
  ASTRcdDefHash jjtn000 = new ASTRcdDefHash(JJTRCDDEFHASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdDefHash */
    try {
/*@egen*/
    <HASH>
    <OBRA>
    (
        Expr()
    )?
    <CBRA>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	    jjtn000.setName(t.image);
        jjtn000.setToken(token);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefVarArray(Token t)                 :
{/*@bgen(jjtree) RcdDefVarArray */
  ASTRcdDefVarArray jjtn000 = new ASTRcdDefVarArray(JJTRCDDEFVARARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdDefVarArray */
    try {
/*@egen*/
    <VARARRAY>
    <OBRA>
    (
        Expr()
    )?
    <CBRA>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	    jjtn000.setName(t.image);
        jjtn000.setToken(token);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefFile(Token t)             :
{/*@bgen(jjtree) RcdDefFile */
  ASTRcdDefFile jjtn000 = new ASTRcdDefFile(JJTRCDDEFFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdDefFile */
    try {
/*@egen*/
    <FILE>
    <OBRA>
    (
        Expr()
    )?
    <CBRA>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	    jjtn000.setName(t.image);
        jjtn000.setToken(token);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// ************* Block ***************

void Block() :
{
}
{
	IfBlock()
	|
	ForEachBlock()
}

void IfBlock()             :
{/*@bgen(jjtree) RcdIfBlock */
  ASTRcdIfBlock jjtn000 = new ASTRcdIfBlock(JJTRCDIFBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdIfBlock */
        try {
/*@egen*/
	<IF>
    { jjtn000.setToken(token); }
	<OBRA>
	CompExpr()
	<CBRA>
    <OCBRA>
	TrueScript()
    <CCBRA>
	(
		<ELSE>
        <OCBRA>
		FalseScript()
        <CCBRA>
	)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ForEachBlock()                  :
{/*@bgen(jjtree) RcdForEachBlock */
  ASTRcdForEachBlock jjtn000 = new ASTRcdForEachBlock(JJTRCDFOREACHBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdForEachBlock */
        try {
/*@egen*/
	<FOR_EACH>
    { jjtn000.setToken(token); }
	<OBRA>
	Var()
	<IN>
    Var()
	<CBRA>
	<OCBRA>
	TrueScript()
    <CCBRA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TrueScript()                :
{/*@bgen(jjtree) RcdTrueScript */
  ASTRcdTrueScript jjtn000 = new ASTRcdTrueScript(JJTRCDTRUESCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdTrueScript */
        try {
/*@egen*/
	Script()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FalseScript()                 :
{/*@bgen(jjtree) RcdFalseScript */
  ASTRcdFalseScript jjtn000 = new ASTRcdFalseScript(JJTRCDFALSESCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdFalseScript */
        try {
/*@egen*/
	Script()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ************* Statement ***************

void Statement() :
{
}
{
	(
		Print()
	)
	<SEMI>
}

void Print()           :
{/*@bgen(jjtree) RcdPrint */
  ASTRcdPrint jjtn000 = new ASTRcdPrint(JJTRCDPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdPrint */
        try {
/*@egen*/
	<PRINT>
    { jjtn000.setToken(token); }
	<OBRA>
	Expr()
	<CBRA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// ************* Comparison grammar ***************

void CompExpr()            : 
{/*@bgen(jjtree) RcdOpExpr */
    ASTRcdOpExpr jjtn000 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdOpExpr */
  try {
/*@egen*/
  (
    Expr() 
	( 
		t = <EQUAL>
		|
		t = <GT>
		|
		t = <LT>
		|
		t = <GTE>
		|
		t = <LTE>
		|
		t = <NOTEQUAL>
	) 
	Expr()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
        jjtn000.setName(t.image);
        jjtn000.setToken(t); 
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


// ************* Expression grammar ***************

void Expr() : 
{
}
{
    TermExpr() 
	( 
		ExprFollow() 
	)*
}

void ExprFollow()           : 
{/*@bgen(jjtree) RcdOpExpr */
    ASTRcdOpExpr jjtn000 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdOpExpr */
    try {
/*@egen*/
    ( 
        t = <PLUS>
        |
        t = <MINUS>
    ) 
    TermExpr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.setName(t.image);
        jjtn000.setToken(t); 
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TermExpr() : 
{
}
{
    Factor() 
	( 
        TermExprFollow()
	)*
}

void TermExprFollow()           : 
{/*@bgen(jjtree) RcdOpExpr */
    ASTRcdOpExpr jjtn000 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdOpExpr */
    try {
/*@egen*/
    ( 
        t = <MUL>
        |
        t = <DIV>
    ) 
    Factor()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.setName(t.image);
        jjtn000.setToken(t); 
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Factor() : {}
{
  <OBRA> Expr() <CBRA> 
  |
  Var() 
  | 
  Id() 
  | 
  String()
  |
  IntNum()
  |
  FloatNum()
  |
  Hash()
}

void Var()        :
{/*@bgen(jjtree) RcdVar */
    ASTRcdVar jjtn000 = new ASTRcdVar(JJTRCDVAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdVar */
    try {
/*@egen*/
    (
        t = <VAR_LITERAL>
	    (
    		<OABRA>
			Expr()
	    	<CABRA>
    	)?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            jjtn000.setName(t.image);
            jjtn000.setToken(t); 
        }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Id()        :
{/*@bgen(jjtree) RcdId */
    ASTRcdId jjtn000 = new ASTRcdId(JJTRCDID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdId */
    try {
/*@egen*/
    t = <ID_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        jjtn000.setToken(t); 
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void String()            :
{/*@bgen(jjtree) RcdString */
    ASTRcdString jjtn000 = new ASTRcdString(JJTRCDSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdString */
    try {
/*@egen*/
    t = <STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        jjtn000.setToken(t); 
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IntNum()            :
{/*@bgen(jjtree) RcdIntNum */
    ASTRcdIntNum jjtn000 = new ASTRcdIntNum(JJTRCDINTNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdIntNum */
    try {
/*@egen*/
    (
        t = <DEC_LITERAL>
		|
        t = <HEX_LITERAL>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        jjtn000.setToken(t); 
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatNum()              :
{/*@bgen(jjtree) RcdFloatNum */
    ASTRcdFloatNum jjtn000 = new ASTRcdFloatNum(JJTRCDFLOATNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdFloatNum */
    try {
/*@egen*/
    t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        jjtn000.setToken(t); 
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// ************* HASH grammar ***************

void Hash()          :
{/*@bgen(jjtree) RcdHash */
  ASTRcdHash jjtn000 = new ASTRcdHash(JJTRCDHASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdHash */
  try {
/*@egen*/
  (
    <OCBRA> 
    {
        jjtn000.setToken(token); 
    }
	Tupl()
	( 
	    <COMMA>
		Tupl()
	)*
    <CCBRA> 
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Tupl() : 
{
}
{/*@bgen(jjtree) #RcdTupl(> 1) */
    {
      ASTRcdTupl jjtn001 = new ASTRcdTupl(JJTRCDTUPL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        Expr()
        (
            <COLON>
                {
                    jjtn001.setToken(token); 
                }
            Expr() 
        )?
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/             
}