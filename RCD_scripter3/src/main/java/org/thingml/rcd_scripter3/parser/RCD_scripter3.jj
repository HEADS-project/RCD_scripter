/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. RCD_scripter3.jj */
/*@egen*//* RCD scriptgrammar.jj version 2 using task joblist*/
options {
             
                         
                                                  
  STATIC = false ;
}

PARSER_BEGIN (RcdScript3Parser)
   package org.thingml.rcd_scripter3.parser;
   public class RcdScript3Parser/*@bgen(jjtree)*/implements RcdScript3ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRcdScript3ParserState jjtree = new JJTRcdScript3ParserState();

/*@egen*/
         public ASTStart makeAst()throws ParseException, TokenMgrError
   { return(Start()) ; }
   }
PARSER_END (RcdScript3Parser)

SKIP: /* WHITE SPACE */ { "\n" | "\r" | "\r\n" | "\\" | "\t" | " " | "//" | "*/" | "/*"}

/* COMMENTS */

MORE :
{
  "##" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}



TOKEN [IGNORE_CASE]: /* Commands */
{
  <DEF :("DEF")>
|
  <ADD :("ADD")>
|
  <VARARRAY :("VARARRAY")>
|
  <KEYVALUE :("KEYVALUE")>
|
  <FILE :("FILE")>
|
  <CLOSE :("CLOSE")>
|
  <FOR_EACH :("FOR_EACH")>
|
  <HAS :("HAS")>
|
  <IF:("IF")>
|
  <IF_ROW:("IF_ROW")>
|
  <ELSE:("ELSE")>
|
  <IN :("IN")>
|
  <INT :("INT")>
|
  <PRINT :("PRINT")>
|
  <PRINTLN :("PRINTLN")>
|
  <HASH :("HASH")>
|
  <SETDEF :("SETDEF")>
|
  <HASHLIST :("HASHLIST")>
}


TOKEN :  /* Literals */
{
  < VAR_LITERAL: <DOLLAR><ID_LITERAL> >
|
  < ID_LITERAL: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < DEC_LITERAL: <DIGIT> (<DIGIT>)* >
|
  < HEX_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :  /* Character groups */
{
  < LETTER: [ "a"-"z", "A"-"Z", "_" ] >
|
  < DIGIT: [ "0"-"9"] >
|
  < HEX_DIGIT: [ "0"-"9", "a"-"f", "A"-"F"] >
}

TOKEN:  /* Separators */
{
    <OBRA:("(")>
|
    <CBRA:(")")>
|
    <OCBRA:("{")>
|
    <CCBRA:("}")>
|
    <OABRA:("[")>
|
    <CABRA:("]")>
|
    <COMMA:(",")>
|
    <PERIOD:(".")>
|
    <SEMI:(";")>
|
    <ASSIGN:("=")>
|
    <EQUAL:("==")>
|
    <DOLLAR:("$")>
|
    <PLUS:("+")>
|
    <MINUS:("-")>
|
    <MUL:("*")>
|
    <DIV:("/")>
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Script()
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Script() : {}
{
    (
        Def()
//        |
//        Statement()
//        |
//        Block()
    )*
}

void Def() : 
{
    Token t;
}
{
    <DEF>
    t = <VAR_LITERAL>
    <ASSIGN>
    (
        DefHashList(t)
//        |
//        DefHash()
//        |
//        DefKeyValue()
//        |
//        DefValue(jobList, TId_defVarName)
//        |
//        DefVarArray()
        |
        DefFile(t)
    )
    <SEMI>
}

void DefHashList(Token t)                 :
{/*@bgen(jjtree) RcdDefHashList */
  ASTRcdDefHashList jjtn000 = new ASTRcdDefHashList(JJTRCDDEFHASHLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdDefHashList */
    try {
/*@egen*/
    <HASHLIST>
    <OBRA>
    (
        Var()
    )?
    <CBRA>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	    jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void DefFile(Token t)             :
{/*@bgen(jjtree) RcdDefFile */
  ASTRcdDefFile jjtn000 = new ASTRcdDefFile(JJTRCDDEFFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RcdDefFile */
    try {
/*@egen*/
    <FILE>
    <OBRA>
    (
        Expr()
    )?
    <CBRA>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	    jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr() :
{
}
{
    (
	    AddExpr() 
//		| 
//		HashExpr()
	)
}

void AddExpr() : 
{
    Token t;
}
{/*@bgen(jjtree) #RcdOpExpr(> 1) */
  {
    ASTRcdOpExpr jjtn001 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    MulExpr() 
	( 
	    ( 
		    t = <PLUS>
		    |
            t = <MINUS>
		) 
		MulExpr() 
		{jjtn001.setName(t.image);}
	)*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/               
}

void MulExpr() : 
{
    Token t;
}
{/*@bgen(jjtree) #RcdOpExpr(> 1) */
  {
    ASTRcdOpExpr jjtn001 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryExpr() 
	( 
	    ( 
		    t = <MUL>
		    |
            t = <DIV>
		) 
		UnaryExpr() 
		{jjtn001.setName(t.image);}
	)*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/               
}

void UnaryExpr() : {}
{
  <OBRA> AddExpr() <CBRA> 
  |
  Var() 
  | 
  String()
  |
  Num()
}

void Var()         :
{/*@bgen(jjtree) RcdVar */
    ASTRcdVar jjtn000 = new ASTRcdVar(JJTRCDVAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdVar */
    try {
/*@egen*/
    t = <VAR_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void String()            :
{/*@bgen(jjtree) RcdString */
    ASTRcdString jjtn000 = new ASTRcdString(JJTRCDSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdString */
    try {
/*@egen*/
    t = <STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Num()         :
{/*@bgen(jjtree) RcdNum */
    ASTRcdNum jjtn000 = new ASTRcdNum(JJTRCDNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RcdNum */
    try {
/*@egen*/
    t = <DEC_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}