/* RCD scriptgrammar.jj version 2 using task joblist*/
options {
  MULTI=true;
  NODE_DEFAULT_VOID=true;
  NODE_PACKAGE="org.thingml.rcd_scripter3.parser";
  STATIC = false ;
}

PARSER_BEGIN (RcdScript3Parser)
   package org.thingml.rcd_scripter3.parser;
   import java.io.FileReader;
   public class RcdScript3Parser {
      public ASTStart makeAst()throws ParseException, TokenMgrError
      {
         token_source.defaultLexState = IN_RCD_SKIP_REGION; 
         token_source.curLexState = IN_RCD_SKIP_REGION; 
	     return(Start()); 
	  }
   }
PARSER_END (RcdScript3Parser)

SKIP: /* WHITE SPACE */ { "\n" | "\r" | "\r\n" | "\\" | "\t" | " " | "//" | "*/" | "/*"}

/* COMMENTS */

MORE :
{
  "RCD_SCRIPT_STOP" : IN_RCD_SKIP_REGION
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "##" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}


<IN_RCD_SKIP_REGION>
SPECIAL_TOKEN :
{
  <RCD_SKIP_REGION: "RCD_SCRIPT_START" > : DEFAULT
}

<IN_RCD_SKIP_REGION>
MORE :
{
  < ~[] >
}



TOKEN [IGNORE_CASE]: /* Commands */
{
  <INCLUDE :("INCLUDE")>
|
  <DEF :("DEF")>
|
  <ADD :("ADD")>
|
  <VARARRAY :("VARARRAY")>
|
  <KEYVALUE :("KEYVALUE")>
|
  <FILE :("FILE")>
|
  <CLOSE :("CLOSE")>
|
  <FOR_EACH :("FOR_EACH")>
|
  <HAS :("HAS")>
|
  <IF:("IF")>
|
  <IF_ROW:("IF_ROW")>
|
  <ELSE:("ELSE")>
|
  <IN :("IN")>
|
  <INT :("INT")>
|
  <PRINT :("PRINT")>
|
  <PRINTLN :("PRINTLN")>
|
  <HASH :("HASH")>
|
  <SETDEF :("SETDEF")>
|
  <HASHLIST :("HASHLIST")>
}


TOKEN :  /* Literals */
{
  < VAR_LITERAL: <DOLLAR><ID_LITERAL> >
|
  < ID_LITERAL: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < DEC_LITERAL: (["+","-"])? (<DIGIT>)+ >
|
  < FLOAT_LITERAL: (["+","-"])? (<DIGIT>)+ <PERIOD> (<DIGIT>)+ (<DECIMAL_EXPONENT>)? >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < HEX_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :  /* Character groups */
{
  < LETTER: [ "a"-"z", "A"-"Z", "_" ] >
|
  < DIGIT: [ "0"-"9"] >
|
  < HEX_DIGIT: [ "0"-"9", "a"-"f", "A"-"F"] >
}

TOKEN:  /* Separators */
{
    <OBRA:("(")>
|
    <CBRA:(")")>
|
    <OCBRA:("{")>
|
    <CCBRA:("}")>
|
    <OABRA:("[")>
|
    <CABRA:("]")>
|
    <COMMA:(",")>
|
    <PERIOD:(".")>
|
    <SEMI:(";")>
|
    <COLON:(":")>
|
    <ASSIGN:("=")>
|
    <EQUAL:("==")>
|
    <GT:(">")>
|
    <LT:("<")>
|
    <GTE:(">=")>
|
    <LTE:("<=")>
|
    <NOTEQUAL:("!=")>
|
    <DOLLAR:("$")>
|
    <PLUS:("+")>
|
    <MINUS:("-")>
|
    <MUL:("*")>
|
    <DIV:("/")>
}


ASTStart Start() #Start : {}
{
	Script()
    <EOF>
    {return jjtThis;}
}

void Script() : {}
{
    (
		Include()
		|
        Def()
        |
        Block()
//        |
//        Statement()
    )*
}

void Include() :
{
    Token t;
	String fileName;
    RcdScript3Parser subParser;
    ASTStart subAst;
}
{
    <INCLUDE>
    <OBRA>
    t = <STRING_LITERAL>
    <CBRA>
    <SEMI>
    {
        fileName = t.image.substring(0, t.image.length()-1).substring(1); // Remove quotes
		System.out.println("Starting to include " + fileName);
        try{
			subParser = new RcdScript3Parser(new FileReader(fileName)); 
			subAst = subParser.makeAst(); 
            subAst.dump("Include: ");
			
			if (subAst.children != null) {
				for (int i = 0; i < subAst.children.length; ++i) {
					jjtree.openNodeScope(subAst.children[i]);
					jjtree.closeNodeScope(subAst.children[i], true);
				}
			}
		}
        catch (Exception ex) 
        {
            ex.printStackTrace();
        }
		System.out.println("End of include " + fileName);
	}
}

// ************* Def xxx ***************
void Def() : 
{
    Token t;
}
{
    <DEF>
    t = <VAR_LITERAL>
    <ASSIGN>
    (
        DefHashList(t)
        |
        DefHash(t)
//        |
//        DefKeyValue()
//        |
//        DefValue(jobList, TId_defVarName)
        |
        DefVarArray(t)
        |
        DefFile(t)
    )
    <SEMI>
}

void DefHashList(Token t) #RcdDefHashList :
{
}
{
    <HASHLIST>
    <OBRA>
    (
        Var()
    )?
    <CBRA>
    {
	    jjtThis.setName(t.image);
	}
}


void DefHash(Token t) #RcdDefHash :
{
}
{
    <HASH>
    <OBRA>
    (
        Expr()
    )?
    <CBRA>
    {
	    jjtThis.setName(t.image);
	}
}

void DefVarArray(Token t) #RcdDefVarArray :
{
}
{
    <VARARRAY>
    <OBRA>
    (
        Expr()
    )?
    <CBRA>
    {
	    jjtThis.setName(t.image);
	}
}

void DefFile(Token t) #RcdDefFile :
{
}
{
    <FILE>
    <OBRA>
    (
        Expr()
    )?
    <CBRA>
    {
	    jjtThis.setName(t.image);
	}
}

// ************* Block ***************

void Block() :
{
}
{
	IfBlock()
	|
	ForEachBlock()
}

void IfBlock() #RcdIfBlock :
{
}
{
	<IF>
	<OBRA>
	CompExpr()
	<CBRA>
    <OCBRA>
	TrueScript()
    <CCBRA>
	(
		<ELSE>
        <OCBRA>
		FalseScript()
        <CCBRA>
	)?
}


void ForEachBlock() #RcdForEachBlock :
{
}
{
	<FOR_EACH>
	<OBRA>
	Var()
	<IN>
    Var()
	<CBRA>
	<OCBRA>
	TrueScript()
    <CCBRA>
}

void TrueScript() #RcdTrueScript :
{
}
{
	Script()
}

void FalseScript() #RcdFalseScript :
{
}
{
	Script()
}

// ************* Comparison grammar ***************

void CompExpr() #RcdOpExpr : 
{
    Token t;
}
{
  (
    OpExpr() 
	( 
		t = <EQUAL>
		|
		t = <GT>
		|
		t = <LT>
		|
		t = <GTE>
		|
		t = <LTE>
		|
		t = <NOTEQUAL>
	) 
	OpExpr() 
	{jjtThis.setName(t.image);}
  ) 
}


// ************* HASH grammar ***************

void Hash() #RcdHash :
{
}
{
  (
    <OCBRA> 
	Tupl()
	( 
	    <COMMA>
		Tupl()
	)*
    <CCBRA> 
  ) 
}

void Tupl() : 
{
}
{
  (
    OpExpr()
    (
      <COLON>
      OpExpr() 
    )?
  ) #RcdTupl(>1)
}

// ************* Expression grammar ***************

void Expr() :
{
}
{
    (
	    OpExpr() 
		| 
		Hash()
	)
}

void OpExpr() : 
{
    Token t;
}
{
  (
    TermExpr() 
	( 
	    ( 
    	    t = <PLUS>
		    |
            t = <MINUS>
		) 
		OpExpr() 
		{jjtThis.setName(t.image);}
	)?
  ) #RcdOpExpr(>1)
}

void TermExpr() : 
{
    Token t;
}
{
  (
    Factor() 
	( 
	    ( 
		    t = <MUL>
		    |
            t = <DIV>
		) 
		TermExpr() 
		{jjtThis.setName(t.image);}
	)?
  ) #RcdOpExpr(>1)
}

void Factor() : {}
{
  <OBRA> OpExpr() <CBRA> 
  |
  Var() 
  | 
  Id() 
  | 
  String()
  |
  IntNum()
  |
  FloatNum()
}

void Var() #RcdVar:
{
    Token t;
}
{
    (
        t = <VAR_LITERAL>
	    (
    		<OABRA>
			OpExpr()
	    	<CABRA>
    	)?
        {jjtThis.setName(t.image);}
    ) 
}

void Id() #RcdId :
{
    Token t;
}
{
    t = <ID_LITERAL>
    {jjtThis.setName(t.image);}
}

void String() #RcdString :
{
    Token t;
}
{
    t = <STRING_LITERAL>
    {jjtThis.setName(t.image);}
}

void IntNum() #RcdIntNum :
{
    Token t;
}
{
    (
        t = <DEC_LITERAL>
		|
        t = <HEX_LITERAL>
	)
    {jjtThis.setName(t.image);}
}

void FloatNum() #RcdFloatNum :
{
    Token t;
}
{
    t = <FLOAT_LITERAL>
    {jjtThis.setName(t.image);}
}
