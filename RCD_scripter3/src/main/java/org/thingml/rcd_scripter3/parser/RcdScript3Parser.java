/**
 * Copyright (C) 2016 SINTEF <steffen.dalgard@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* RcdScript3Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. RcdScript3Parser.java */
   package org.thingml.rcd_scripter3.parser;
   import java.io.FileReader;
   public class RcdScript3Parser/*@bgen(jjtree)*/implements RcdScript3ParserTreeConstants, RcdScript3ParserConstants {/*@bgen(jjtree)*/
  protected JJTRcdScript3ParserState jjtree = new JJTRcdScript3ParserState();private String fileName;
        public ASTRcdStart makeAst()throws ParseException, TokenMgrError
        {
            token_source.defaultLexState = IN_RCD_SKIP_REGION;
            token_source.curLexState = IN_RCD_SKIP_REGION;
                return(Start());
        }

        public void setFileName(String name) {
            fileName = name;
        }

  final public ASTRcdStart Start() throws ParseException {/*@bgen(jjtree) RcdStart */
  ASTRcdStart jjtn000 = new ASTRcdStart(JJTRCDSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Script();
      jj_consume_token(RCD_SCRIPT_END);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Script() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE:
      case VALARRAY:
      case VALUE:
      case FILE:
      case HASH:
      case HASHLIST:
      case VOID:
      case FOR:
      case IF:
      case VAR_LITERAL:
      case ID_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE:{
        Include();
        break;
        }
      case VALARRAY:
      case VALUE:
      case FILE:
      case HASH:
      case HASHLIST:
      case VOID:{
        Decl();
        break;
        }
      case FOR:
      case IF:{
        Block();
        break;
        }
      case VAR_LITERAL:
      case ID_LITERAL:{
        Statement();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Include() throws ParseException {Token t;
        String fileName;
    RcdScript3Parser subParser;
    ASTRcdStart subAst;
    jj_consume_token(INCLUDE);
    jj_consume_token(OBRA);
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(CBRA);
    jj_consume_token(SEMI);
fileName = t.image.substring(0, t.image.length()-1).substring(1); // Remove quotes
                System.out.println("Starting to include " + fileName);
        try{
                        subParser = new RcdScript3Parser(new FileReader(fileName));
                        subAst = subParser.makeAst();
            subAst.dump("Include: ");

                        if (subAst.children != null) {
                                for (int i = 0; i < subAst.children.length; ++i) {
                                        jjtree.openNodeScope(subAst.children[i]);
                                        jjtree.closeNodeScope(subAst.children[i], true);
                                }
                        }
                }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
                System.out.println("End of include " + fileName);
  }

// ************* Decl xxx ***************
  final public void Decl() throws ParseException {
    if (jj_2_1(2147483647)) {
      DeclProc();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VALARRAY:
      case VALUE:
      case FILE:
      case HASH:
      case HASHLIST:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HASHLIST:{
          DeclHashList();
          break;
          }
        case HASH:{
          DeclHash();
          break;
          }
        case FILE:{
          DeclFile();
          break;
          }
        case VALUE:{
          DeclValue();
          break;
          }
        case VALARRAY:{
          DeclValArray();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMI);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void DeclProc() throws ParseException {/*@bgen(jjtree) RcdDeclProc */
    ASTRcdDeclProc jjtn000 = new ASTRcdDeclProc(JJTRCDDECLPROC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      RetType();
      jj_consume_token(PROC);
      t = jj_consume_token(VAR_LITERAL);
      jj_consume_token(OBRA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VALARRAY:
      case VALUE:
      case FILE:
      case HASH:
      case HASHLIST:
      case VOID:{
        Param();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          Param();
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(CBRA);
      jj_consume_token(OCBRA);
      TrueScript();
      jj_consume_token(CCBRA);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RetType() throws ParseException {/*@bgen(jjtree) RcdType */
    ASTRcdType jjtn000 = new ASTRcdType(JJTRCDTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HASHLIST:{
        t = jj_consume_token(HASHLIST);
        break;
        }
      case HASH:{
        t = jj_consume_token(HASH);
        break;
        }
      case FILE:{
        t = jj_consume_token(FILE);
        break;
        }
      case VALUE:{
        t = jj_consume_token(VALUE);
        break;
        }
      case VALARRAY:{
        t = jj_consume_token(VALARRAY);
        break;
        }
      case VOID:{
        t = jj_consume_token(VOID);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Param() throws ParseException {/*@bgen(jjtree) RcdParam */
    ASTRcdParam jjtn000 = new ASTRcdParam(JJTRCDPARAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      ParamType();
      t = jj_consume_token(VAR_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ParamType() throws ParseException {/*@bgen(jjtree) RcdType */
    ASTRcdType jjtn000 = new ASTRcdType(JJTRCDTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HASHLIST:{
        t = jj_consume_token(HASHLIST);
        break;
        }
      case HASH:{
        t = jj_consume_token(HASH);
        break;
        }
      case FILE:{
        t = jj_consume_token(FILE);
        break;
        }
      case VALUE:{
        t = jj_consume_token(VALUE);
        break;
        }
      case VALARRAY:{
        t = jj_consume_token(VALARRAY);
        break;
        }
      case VOID:{
        t = jj_consume_token(VOID);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeclHashList() throws ParseException {/*@bgen(jjtree) RcdDeclHashList */
    ASTRcdDeclHashList jjtn000 = new ASTRcdDeclHashList(JJTRCDDECLHASHLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(HASHLIST);
      t = jj_consume_token(VAR_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        Var();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeclHash() throws ParseException {/*@bgen(jjtree) RcdDeclHash */
    ASTRcdDeclHash jjtn000 = new ASTRcdDeclHash(JJTRCDDECLHASH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(HASH);
      t = jj_consume_token(VAR_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        Expr();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeclFile() throws ParseException {/*@bgen(jjtree) RcdDeclFile */
    ASTRcdDeclFile jjtn000 = new ASTRcdDeclFile(JJTRCDDECLFILE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(FILE);
      t = jj_consume_token(VAR_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeclValue() throws ParseException {/*@bgen(jjtree) RcdDeclValue */
    ASTRcdDeclValue jjtn000 = new ASTRcdDeclValue(JJTRCDDECLVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(VALUE);
      t = jj_consume_token(VAR_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        Expr();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeclValArray() throws ParseException {/*@bgen(jjtree) RcdDeclValArray */
    ASTRcdDeclValArray jjtn000 = new ASTRcdDeclValArray(JJTRCDDECLVALARRAY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(VALARRAY);
      t = jj_consume_token(VAR_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR_LITERAL:{
        Var();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(token);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// ************* Block ***************
  final public 
void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      IfBlock();
      break;
      }
    case FOR:{
      ForBlock();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfBlock() throws ParseException {/*@bgen(jjtree) RcdIfBlock */
  ASTRcdIfBlock jjtn000 = new ASTRcdIfBlock(JJTRCDIFBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
jjtn000.setToken(token);
      jj_consume_token(OBRA);
      CmpExpr();
      jj_consume_token(CBRA);
      jj_consume_token(OCBRA);
      TrueScript();
      jj_consume_token(CCBRA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        jj_consume_token(OCBRA);
        FalseScript();
        jj_consume_token(CCBRA);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ForBlock() throws ParseException {/*@bgen(jjtree) RcdForBlock */
  ASTRcdForBlock jjtn000 = new ASTRcdForBlock(JJTRCDFORBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
jjtn000.setToken(token);
      jj_consume_token(OBRA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HASH:{
        jj_consume_token(HASH);
        break;
        }
      case VALUE:{
        jj_consume_token(VALUE);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Var();
      jj_consume_token(COLON);
      Var();
      jj_consume_token(CBRA);
      jj_consume_token(OCBRA);
      TrueScript();
      jj_consume_token(CCBRA);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TrueScript() throws ParseException {/*@bgen(jjtree) RcdTrueScript */
  ASTRcdTrueScript jjtn000 = new ASTRcdTrueScript(JJTRCDTRUESCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Script();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FalseScript() throws ParseException {/*@bgen(jjtree) RcdFalseScript */
  ASTRcdFalseScript jjtn000 = new ASTRcdFalseScript(JJTRCDFALSESCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Script();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ************* Statement ***************
  final public 
void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID_LITERAL:{
      CallProc();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_2(2147483647)) {
        CallVarMethod();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR_LITERAL:{
          VarAssign();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(SEMI);
  }

  final public void CallProc() throws ParseException {/*@bgen(jjtree) RcdCallProc */
  ASTRcdCallProc jjtn000 = new ASTRcdCallProc(JJTRCDCALLPROC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Id();
jjtn000.setToken(token);
      jj_consume_token(OBRA);
      Expr();
      jj_consume_token(CBRA);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CallVarMethod() throws ParseException {/*@bgen(jjtree) RcdCallVarMethod */
  ASTRcdCallVarMethod jjtn000 = new ASTRcdCallVarMethod(JJTRCDCALLVARMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
jjtn000.setToken(token);
      jj_consume_token(PERIOD);
      Id();
      jj_consume_token(OBRA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case VAR_LITERAL:
      case ID_LITERAL:
      case DEC_LITERAL:
      case HEX_LITERAL:
      case STRING_LITERAL:
      case OBRA:
      case OCBRA:{
        Expr();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          Expr();
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(CBRA);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void VarAssign() throws ParseException {/*@bgen(jjtree) RcdVarAssign */
    ASTRcdVarAssign jjtn000 = new ASTRcdVarAssign(JJTRCDVARASSIGN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OABRA:{
        jj_consume_token(OABRA);
        Expr();
        jj_consume_token(CABRA);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
jjtn000.setName(t.image);
            jjtn000.setToken(t);
      jj_consume_token(ASSIGN);
      Expr();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// ************* Comparison grammar ***************
  final public 
void CmpExpr() throws ParseException {/*@bgen(jjtree) RcdOpExpr */
    ASTRcdOpExpr jjtn000 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      Expr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        t = jj_consume_token(EQUAL);
        break;
        }
      case GT:{
        t = jj_consume_token(GT);
        break;
        }
      case LT:{
        t = jj_consume_token(LT);
        break;
        }
      case GTE:{
        t = jj_consume_token(GTE);
        break;
        }
      case LTE:{
        t = jj_consume_token(LTE);
        break;
        }
      case NOTEQUAL:{
        t = jj_consume_token(NOTEQUAL);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expr();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// ************* Expression grammar ***************
  final public 
void Expr() throws ParseException {
    TermExpr();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_4;
      }
      ExprFollow();
    }
  }

  final public void ExprFollow() throws ParseException {/*@bgen(jjtree) RcdOpExpr */
    ASTRcdOpExpr jjtn000 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      TermExpr();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TermExpr() throws ParseException {
    Factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      TermExprFollow();
    }
  }

  final public void TermExprFollow() throws ParseException {/*@bgen(jjtree) RcdOpExpr */
    ASTRcdOpExpr jjtn000 = new ASTRcdOpExpr(JJTRCDOPEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        t = jj_consume_token(MUL);
        break;
        }
      case DIV:{
        t = jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBRA:{
      jj_consume_token(OBRA);
      Expr();
      jj_consume_token(CBRA);
      break;
      }
    case VAR_LITERAL:{
      Var();
      break;
      }
    case ID_LITERAL:{
      Id();
      break;
      }
    case STRING_LITERAL:{
      String();
      break;
      }
    case DEC_LITERAL:
    case HEX_LITERAL:{
      IntNum();
      break;
      }
    case TRUE:
    case FALSE:{
      Bool();
      break;
      }
    case OCBRA:{
      Hash();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Var() throws ParseException {/*@bgen(jjtree) RcdVar */
    ASTRcdVar jjtn000 = new ASTRcdVar(JJTRCDVAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OABRA:{
        jj_consume_token(OABRA);
        Expr();
        jj_consume_token(CABRA);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setName(t.image);
            jjtn000.setToken(t);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Id() throws ParseException {/*@bgen(jjtree) RcdId */
    ASTRcdId jjtn000 = new ASTRcdId(JJTRCDID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void String() throws ParseException {/*@bgen(jjtree) RcdString */
    ASTRcdString jjtn000 = new ASTRcdString(JJTRCDSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IntNum() throws ParseException {/*@bgen(jjtree) RcdIntNum */
    ASTRcdIntNum jjtn000 = new ASTRcdIntNum(JJTRCDINTNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEC_LITERAL:{
        t = jj_consume_token(DEC_LITERAL);
        break;
        }
      case HEX_LITERAL:{
        t = jj_consume_token(HEX_LITERAL);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Bool() throws ParseException {/*@bgen(jjtree) RcdBool */
    ASTRcdBool jjtn000 = new ASTRcdBool(JJTRCDBOOL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        t = jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FloatNum() throws ParseException {/*@bgen(jjtree) RcdFloatNum */
    ASTRcdFloatNum jjtn000 = new ASTRcdFloatNum(JJTRCDFLOATNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOAT_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
        jjtn000.setToken(t);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// ************* HASH grammar ***************
  final public 
void Hash() throws ParseException {/*@bgen(jjtree) RcdHash */
  ASTRcdHash jjtn000 = new ASTRcdHash(JJTRCDHASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OCBRA);
jjtn000.setToken(token);
      Tupl();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        Tupl();
      }
      jj_consume_token(CCBRA);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Tupl() throws ParseException {
ASTRcdTupl jjtn001 = new ASTRcdTupl(JJTRCDTUPL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      Expr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
jjtn001.setToken(token);
        Expr();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(OBRA)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(CBRA)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(ID_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(OABRA)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(CABRA)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_7()) return true;
    if (jj_scan_token(PROC)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(VAR_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(OCBRA)) return true;
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CCBRA)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_8()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RcdScript3ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x615fc000,0x615fc000,0xf8000,0xf8000,0x0,0x1f8000,0x1f8000,0x1f8000,0x0,0x0,0x0,0x20000000,0x1400000,0x2000000,0x50000,0x40000000,0x20000000,0x0,0xec000000,0x0,0x0,0x0,0x0,0x0,0x0,0xec000000,0x0,0x80000000,0xc000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x28c,0x800,0xfc0000,0x6000000,0x6000000,0x18000000,0x18000000,0x28c,0x800,0x4,0x0,0x2000,0x10000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RcdScript3Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RcdScript3Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RcdScript3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RcdScript3Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RcdScript3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new RcdScript3ParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RcdScript3Parser(RcdScript3ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RcdScript3ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

   }
