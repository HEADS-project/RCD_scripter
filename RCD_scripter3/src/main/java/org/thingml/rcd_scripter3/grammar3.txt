====
    Copyright (C) 2016 SINTEF <steffen.dalgard@sintef.no>

    Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    	http://www.gnu.org/licenses/lgpl-3.0.txt

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
====


Program -> Script <RCD_SCRIPT_END>
Script -> (Include | DeclProc | Statement | Block)*

Include -> <INCLUDE><(> String <)><;>

DeclProc -> <PROC> Id <(> (Var (<,> Var)*)? <)> <{> Script <}>


Block ->  ForBlock1 | ForBlock2 | IfBlock | WhileBlock
ForBlock1 -> <FOR> <(> VarArray <:> Expr <)> <{> Script <}>
ForBlock2 -> <FOR> <(> VarAssign <;> Expr <;> Expr <)> <{> Script <}>
IfBlock -> <IF> <(> Expr <)> <{> Script <}> ( <ELSE> <{> Script <}> )?
WhileBlock -> <WHILE> <(> Expr <)> <{> Script <}>

Statement ->  (VarAssign | CallVarMethod | CallProc | Return)<;>

VarAssign -> Var (Index)* <=> Expr

CallVarMethod -> Var (Index)* CallMethod
// VarArray <.> SETDEF <(> VarArray <)> 
// VarArray <.> ADD <(> VarArray <)>

// VarBool = VarArray <.> HAS <(> Expr <)>

// VarFile <.> Open <(> ExprFilename <)> 
// VarFile <.> Insert <(> ExprFilename, ExprTagbase <)> 
// VarFile <.> PRINT <(> Expr <)> 
// VarFile <.> PRINTLN <(> Expr <)> 
// VarFile <.> PRINTF <(> Expr (<,> Expr)* <)> 
// VarFile <.> CLOSE <(><)> 

// VarBool = Var.ISARRAY()
// VarBool = Var.ISINT()
// VarBool = Var.ISREAL()
// VarBool = Var.ISBOOL()
// VarBool = Var.ISFILE()

???// VarArray <.> SETSIZE_DEFAULT <(> VarInt, VarValue <)> 

CallProc -> Id <(> (Expr (<,> Expr)*)?  <)>
CallProc -> Var (Index)* <(> (Expr (<,> Expr)*)?  <)> // Func name stored in var
// PRINT<(> Expr <)> 
// PRINTLN<(> Expr <)> 
// PRINTF <(> Expr (<,> Expr)* <)> 
// VarArray = ARRAY()
// VarFile = FILE()

Return -> <RETURN> <(> (Expr)?  <)>


Expr -> CondExpr

CondExpr -> OrExpr (<?> Expr <:> Expr)?

OrExpr -> AndExpr ( "OR" AndExpr)*

AndExpr -> CmpExpr ( "AND" CmpExpr)*

CmpExpr -> AddExpr ( CmpOp AddExpr)?
CmpOp -> ["==",">","<",">=","<=","!="]

AddExpr -> MulExpr ( AddOp MulExpr )*
AddOp -> ["+","-"]

MulExpr -> UnaryExpr (MulOp UnaryExpr)*
MulOp -> ["*","/","%"]

UnaryExpr -> ("+" | "-" | "++" | "--")? PrimExprPrefix PrimExprSuffix

PrimExprPrefix -> <(> Expr <)> | Literal | CallProc | Var

PrimExprSuffix -> (Index)* (CallMethod)?  ("++" | "--")?
Index -> <[> Expr <]>
CallMethod -> <.><(> (Expr (<,> Expr)*)?  <)>


Literal -> StringVal | IntVal | BoolVal | ArrayVal

StringVal -> "...." | Id
IntVal -> Dec | Hex
Dec -> Digit+
Hex -> "0" ["x","X"] (HexDigit)+ 

BoolVal -> "true" | "false"

ArrayVal -> <{>(KeyValue (<,> KeyValue)*)? <}>
KeyValue -> Tupl | VarArray 
Tupl -> Expr <:> Expr

Var -> <$>Id 

Id -> Letter (Letter | Digit)*

VarFile -> Var
VarInt -> Var
//VarReal -> Var
VarString -> Var
VarBool -> Var
VarArray -> Var

