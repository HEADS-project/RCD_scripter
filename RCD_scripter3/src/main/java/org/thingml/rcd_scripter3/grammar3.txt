====
    Copyright (C) 2016 SINTEF <steffen.dalgard@sintef.no>

    Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    	http://www.gnu.org/licenses/lgpl-3.0.txt

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
====


Program -> Script <RCD_SCRIPT_END>
Script -> (Include | Decl | Statement | Block)*

Include -> <INCLUDE><(> String <)><;>

Decl -> (DeclHashList | DeclHash | DeclFile | DeclVal | DeclValArray)<;>

DeclHashList -> <HASHLIST> Var (<=> VarHashList)? 
DeclHash     -> <HASH> Var (<=>  HashList | VarHash)? 
DeclFile     -> <FILE> Var 
DeclValue    -> <VALUE> Var (<=>  Expr | VarValue )?
DeclValArray -> <VALARRAY> Var (<=>  VarValArray )? 


Block -> ForBlock | IfBlock
ForBlock -> <FOR> <(> (<HASH> | <VALUE> ) Var <:> (VarHashList | VarValArray) <)> <{> Script <}>


IfBlock -> <IF> <(> Cmp <)> <{> Script <}> ( <ELSE> <{> Script <}> )?
Cmp -> CmpExpr | CmpHas
CmpExpr -> Expr CmpOp Expr 
CmpOp -> ["==",">","<",">=","<=","!="]
CmpHas -> VarHash <HAS> Expr 

Statement ->  (VarAssign | VarIndexAssign | CallVarMethod | CallProc)<;>

VarAssign -> Var <=> Expr
VarIndexAssign -> VarIndex <=> Expr

CallVarMethod -> Var <.> Id <(> (Expr (<,> Expr)*)?  <)>
// VarHashList <.> SETDEF <(> HashList | VarHash <)> 
// VarHashList <.> ADD <(> HashList | VarHash <)>

// VarHash <.> ADD <(> Hash | VarHash <)>

// VarFile <.> Open <(> ExprFilename <)> 
// VarFile <.> Insert <(> ExprFilename, ExprTagbase <)> 
// VarFile <.> PRINT <(> Expr <)> 
// VarFile <.> PRINTLN <(> Expr <)> 
// VarFile <.> CLOSE <(><)> 

// VarValArray <.> SETSIZE_DEFAULT <(> VarInt, VarValue <)> 

CallProc -> Id <(> (Expr (<,> Expr)*)?  <)>
// PRINT<(> Expr <)> 
// PRINTLN<(> Expr <)> 

Hash -> <{>KeyValue (<,> KeyValue)* <}>
KeyValue -> Tupl | VarHash 
Tupl -> Expr <:> Expr

Expr -> Term ( AddOp Term )*
AddOp -> ["+","-"]

Term -> Factor (MulOp Factor)*
MulOp -> ["*","/"]

Factor -> <(> Expr <)> |  Var | VarIndex | Id | String | IntNum | Hash

IntNum -> Dec | Hex
Dec -> Digit+
Hex -> "0" ["x","X"] (HexDigit)+ 

VarHashList -> Var
VarHash -> Var
VarFile -> Var
VarValue -> Var
VarValArray -> Var

VarIndex -> Var <[> Expr <]> 
Var -> <$>Id
Id -> Letter+
String -> "...."


